{
  "language": "Solidity",
  "sources": {
    "contracts/lib/@harvest-finance/Controllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {Governable} from \"./Governable.sol\";\r\n\r\ncontract Controllable is Governable {\r\n\r\n  constructor(address _storage) Governable(_storage) public {\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(store.isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return store.controller();\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {Storage} from \"./Storage.sol\";\r\n\r\ncontract Governable {\r\n\r\n  Storage public store;\r\n\r\n  constructor(address _store) public {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(store.isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return store.governance();\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() public {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"new controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/VaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"./VaultProxy.sol\";\r\nimport \"./Vault.sol\";\r\nimport \"./Controllable.sol\";\r\n\r\ncontract VaultFactory is Controllable {\r\n\r\n  event NewVault(address vault);\r\n\r\n  constructor(address _storage) Controllable(_storage) public {}\r\n\r\n  function createVault(\r\n    address _implementation,\r\n    address _storage,\r\n    address _underlying,\r\n    uint256 _toInvestNumerator,\r\n    uint256 _toInvestDenominator\r\n  ) public onlyGovernance returns(address) {\r\n    // VaultProxy proxy = new VaultProxy(_implementation);\r\n    VaultProxy proxy = new VaultProxy();\r\n    Vault(address(proxy)).initializeVault(\r\n      _storage,\r\n      _underlying,\r\n      _toInvestNumerator,\r\n      _toInvestDenominator\r\n    );\r\n    emit NewVault(address(proxy));\r\n    return address(proxy);\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/VaultProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"./hardworkInterface/IUpgradeSource.sol\";\r\n// import \"@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol\";\r\n\r\ncontract VaultProxy {\r\n\r\n  // constructor(address _implementation) public {\r\n  //   _setImplementation(_implementation);\r\n  // }\r\n\r\n  /**\r\n  * The main logic. If the timer has elapsed and there is a schedule upgrade,\r\n  * the governance can upgrade the vault\r\n  */\r\n  function upgrade() external {\r\n    (bool should, address newImplementation) = IUpgradeSource(address(this)).shouldUpgrade();\r\n    require(should, \"Upgrade not scheduled\");\r\n    // _upgradeTo(newImplementation);\r\n\r\n    // the finalization needs to be executed on itself to update the storage of this proxy\r\n    // it also needs to be invoked by the governance, not by address(this), so delegatecall is needed\r\n    (bool success, bytes memory result) = address(this).delegatecall(\r\n      abi.encodeWithSignature(\"finalizeUpgrade()\")\r\n    );\r\n\r\n    require(success, \"Issue when finalizing the upgrade\");\r\n  }\r\n\r\n  // function implementation() external view returns (address) {\r\n  //   return _implementation();\r\n  // }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {MathUpgradeable} from \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\";\r\nimport {SafeMathUpgradeable} from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport {AddressUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20DetailedUpgradeable.sol\";\r\nimport {IStrategy} from \"./hardworkInterface/IStrategy.sol\";\r\nimport {IStrategyV2} from \"./hardworkInterface/IStrategyV2.sol\";\r\nimport {IVault} from \"./hardworkInterface/IVault.sol\";\r\nimport {IController} from \"./hardworkInterface/IController.sol\";\r\nimport {IUpgradeSource} from \"./hardworkInterface/IUpgradeSource.sol\";\r\nimport {ControllableInit} from \"./ControllableInit.sol\";\r\nimport {VaultStorage} from \"./VaultStorage.sol\";\r\n\r\ncontract Vault is ERC20Upgradeable, IVault, IUpgradeSource, ControllableInit, VaultStorage {\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n  using AddressUpgradeable for address;\r\n  using SafeMathUpgradeable for uint256;\r\n\r\n  event Withdraw(address indexed beneficiary, uint256 amount);\r\n  event Deposit(address indexed beneficiary, uint256 amount);\r\n  event Invest(uint256 amount);\r\n  event StrategyAnnounced(address newStrategy, uint256 time);\r\n  event StrategyChanged(address newStrategy, address oldStrategy);\r\n\r\n  modifier whenStrategyDefined() {\r\n    require(address(strategy()) != address(0), \"Strategy must be defined\");\r\n    _;\r\n  }\r\n\r\n  // Only smart contracts will be affected by this modifier\r\n  modifier defense() {\r\n    require(\r\n      (msg.sender == tx.origin) ||                // If it is a normal user and not smart contract,\r\n      // then the requirement will pass\r\n      !IController(controller()).greyList(msg.sender), // If it is a smart contract, then\r\n      \"This smart contract has been grey listed\"  // make sure that it is not on our greyList.\r\n    );\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n  }\r\n\r\n  // the function is name differently to not cause inheritance clash in truffle and allows tests\r\n  function initializeVault(\r\n    address _storage,\r\n    address _underlying,\r\n    uint256 _toInvestNumerator,\r\n    uint256 _toInvestDenominator\r\n  ) public initializer {\r\n    require(_toInvestNumerator <= _toInvestDenominator, \"cannot invest more than 100%\");\r\n    require(_toInvestDenominator != 0, \"cannot divide by 0\");\r\n\r\n    __ERC20_init(\r\n      string(abi.encodePacked(\"bFARM_\", ERC20Upgradeable(_underlying).symbol())),\r\n      string(abi.encodePacked(\"bf\", ERC20Upgradeable(_underlying).symbol()))\r\n    );\r\n    _setupDecimals(ERC20Upgradeable(_underlying).decimals());\r\n\r\n    ControllableInit.initialize(\r\n      _storage\r\n    );\r\n\r\n    uint256 underlyingUnit = 10 ** uint256(ERC20Upgradeable(address(_underlying)).decimals());\r\n    uint256 implementationDelay = 12 hours;\r\n    uint256 strategyChangeDelay = 12 hours;\r\n    VaultStorage.initialize(\r\n      _underlying,\r\n      _toInvestNumerator,\r\n      _toInvestDenominator,\r\n      underlyingUnit,\r\n      implementationDelay,\r\n      strategyChangeDelay\r\n    );\r\n  }\r\n\r\n  function strategy() public view override returns(address) {\r\n    return _strategy();\r\n  }\r\n\r\n  function underlying() public view override returns(address) {\r\n    return _underlying();\r\n  }\r\n\r\n  function underlyingUnit() public view returns(uint256) {\r\n    return _underlyingUnit();\r\n  }\r\n\r\n  function vaultFractionToInvestNumerator() public view returns(uint256) {\r\n    return _vaultFractionToInvestNumerator();\r\n  }\r\n\r\n  function vaultFractionToInvestDenominator() public view returns(uint256) {\r\n    return _vaultFractionToInvestDenominator();\r\n  }\r\n\r\n  function nextImplementation() public view returns(address) {\r\n    return _nextImplementation();\r\n  }\r\n\r\n  function nextImplementationTimestamp() public view returns(uint256) {\r\n    return _nextImplementationTimestamp();\r\n  }\r\n\r\n  function nextImplementationDelay() public view returns(uint256) {\r\n    return _nextImplementationDelay();\r\n  }\r\n\r\n  /**\r\n  * Chooses the best strategy and re-invests. If the strategy did not change, it just calls\r\n  * doHardWork on the current strategy. Call this through controller to claim hard rewards.\r\n  */\r\n  function doHardWork() external override whenStrategyDefined onlyControllerOrGovernance {\r\n    uint256 sharePriceBeforeHardWork = getPricePerFullShare();\r\n    if (_withdrawBeforeReinvesting()) {\r\n      IStrategy(strategy()).withdrawAllToVault();\r\n    }\r\n\r\n    // ensure that new funds are invested too\r\n    invest();\r\n    IStrategy(strategy()).doHardWork();\r\n    uint256 sharePriceAfterHardWork = getPricePerFullShare();\r\n\r\n    if (!allowSharePriceDecrease()) {\r\n      require(sharePriceBeforeHardWork <= sharePriceAfterHardWork, \"Share price should not decrease\");\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Returns the cash balance across all users in this contract.\r\n  */\r\n  function underlyingBalanceInVault() view public override returns (uint256) {\r\n    return IERC20Upgradeable(underlying()).balanceOf(address(this));\r\n  }\r\n\r\n  /* Returns the current underlying (e.g., DAI's) balance together with\r\n   * the invested amount (if DAI is invested elsewhere by the strategy).\r\n  */\r\n  function underlyingBalanceWithInvestment() view public override returns (uint256) {\r\n    if (address(strategy()) == address(0)) {\r\n      // initial state, when not set\r\n      return underlyingBalanceInVault();\r\n    }\r\n    return underlyingBalanceInVault().add(IStrategy(strategy()).investedUnderlyingBalance());\r\n  }\r\n\r\n  function getPricePerFullShare() public view override returns (uint256) {\r\n    return totalSupply() == 0\r\n        ? underlyingUnit()\r\n        : underlyingUnit().mul(underlyingBalanceWithInvestment()).div(totalSupply());\r\n  }\r\n\r\n  function getEstimatedWithdrawalAmount(uint256 numberOfShares) public view returns (uint256 realTimeCalculatedValue) {\r\n    return numberOfShares.mul(getPricePerFullShare()).div(underlyingUnit());\r\n  }\r\n\r\n  function underlyingBalanceWithInvestmentForHolder(address holder) view external override returns (uint256) {\r\n    // for compatibility\r\n    uint256 estimatedWithdrawal = getEstimatedWithdrawalAmount(balanceOf(holder));\r\n    return estimatedWithdrawal;\r\n  }\r\n\r\n  function futureStrategy() public view returns (address) {\r\n    return _futureStrategy();\r\n  }\r\n\r\n  function strategyUpdateTime() public view returns (uint256) {\r\n    return _strategyUpdateTime();\r\n  }\r\n\r\n  function strategyTimeLock() public view returns (uint256) {\r\n    return _strategyTimeLock();\r\n  }\r\n\r\n  function canUpdateStrategy(address _strategy) public view returns(bool) {\r\n    return strategy() == address(0) // no strategy was set yet\r\n      || (_strategy == futureStrategy()\r\n          && block.timestamp > strategyUpdateTime()\r\n          && strategyUpdateTime() > 0); // or the timelock has passed\r\n  }\r\n\r\n  /**\r\n  * Indicates that the strategy update will happen in the future\r\n  */\r\n  function announceStrategyUpdate(address _strategy) public onlyControllerOrGovernance {\r\n    // records a new timestamp\r\n    uint256 when = block.timestamp.add(strategyTimeLock());\r\n    _setStrategyUpdateTime(when);\r\n    _setFutureStrategy(_strategy);\r\n    emit StrategyAnnounced(_strategy, when);\r\n  }\r\n\r\n  /**\r\n  * Finalizes (or cancels) the strategy update by resetting the data\r\n  */\r\n  function finalizeStrategyUpdate() public onlyControllerOrGovernance {\r\n    _setStrategyUpdateTime(0);\r\n    _setFutureStrategy(address(0));\r\n  }\r\n\r\n  function setStrategy(address _strategy) public override onlyControllerOrGovernance {\r\n    require(canUpdateStrategy(_strategy),\r\n      \"The strategy exists and switch timelock did not elapse yet\");\r\n    require(_strategy != address(0), \"new _strategy cannot be empty\");\r\n    require(IStrategy(_strategy).underlying() == address(underlying()), \"Vault underlying must match Strategy underlying\");\r\n    require(IStrategy(_strategy).vault() == address(this), \"the strategy does not belong to this vault\");\r\n\r\n    emit StrategyChanged(_strategy, strategy());\r\n    if (address(_strategy) != address(strategy())) {\r\n      if (address(strategy()) != address(0)) { // if the original strategy (no underscore) is defined\r\n        IERC20Upgradeable(underlying()).safeApprove(address(strategy()), 0);\r\n        IStrategy(strategy()).withdrawAllToVault();\r\n      }\r\n      _setStrategy(_strategy);\r\n      IERC20Upgradeable(underlying()).safeApprove(address(strategy()), 0);\r\n      IERC20Upgradeable(underlying()).safeApprove(address(strategy()), uint256(~0));\r\n    }\r\n    finalizeStrategyUpdate();\r\n  }\r\n\r\n  function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external override onlyGovernance {\r\n    require(denominator > 0, \"denominator must be greater than 0\");\r\n    require(numerator <= denominator, \"denominator must be greater than or equal to the numerator\");\r\n    _setVaultFractionToInvestNumerator(numerator);\r\n    _setVaultFractionToInvestDenominator(denominator);\r\n  }\r\n\r\n  function setWithdrawBeforeReinvesting(bool value) external onlyGovernance {\r\n    _setWithdrawBeforeReinvesting(value);\r\n  }\r\n\r\n  function withdrawBeforeReinvesting() public view returns (bool) {\r\n    return _withdrawBeforeReinvesting();\r\n  }\r\n\r\n  function setAllowSharePriceDecrease(bool value) external onlyGovernance {\r\n    _setAllowSharePriceDecrease(value);\r\n  }\r\n\r\n  function allowSharePriceDecrease() public view returns (bool) {\r\n    return _allowSharePriceDecrease();\r\n  }\r\n\r\n  function availableToInvestOut() public view returns (uint256) {\r\n    uint256 wantInvestInTotal = underlyingBalanceWithInvestment()\r\n        .mul(vaultFractionToInvestNumerator())\r\n        .div(vaultFractionToInvestDenominator());\r\n    uint256 alreadyInvested = IStrategy(strategy()).investedUnderlyingBalance();\r\n    if (alreadyInvested >= wantInvestInTotal) {\r\n      return 0;\r\n    } else {\r\n      uint256 remainingToInvest = wantInvestInTotal.sub(alreadyInvested);\r\n      return remainingToInvest <= underlyingBalanceInVault()\r\n        // TODO: we think that the \"else\" branch of the ternary operation is not\r\n        // going to get hit\r\n        ? remainingToInvest : underlyingBalanceInVault();\r\n    }\r\n  }\r\n\r\n  function invest() internal whenStrategyDefined {\r\n    uint256 availableAmount = availableToInvestOut();\r\n    if (availableAmount > 0) {\r\n      IERC20Upgradeable(underlying()).safeTransfer(address(strategy()), availableAmount);\r\n      emit Invest(availableAmount);\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Allows for depositing the underlying asset in exchange for shares.\r\n  * Approval is assumed.\r\n  */\r\n  function deposit(uint256 amount) external override defense {\r\n    _deposit(amount, msg.sender, msg.sender);\r\n  }\r\n\r\n  /*\r\n  * Allows for depositing the underlying asset in exchange for shares\r\n  * assigned to the holder.\r\n  * This facilitates depositing for someone else (using DepositHelper)\r\n  */\r\n  function depositFor(uint256 amount, address holder) public override defense {\r\n    _deposit(amount, msg.sender, holder);\r\n  }\r\n\r\n  function withdrawAll() public override onlyControllerOrGovernance whenStrategyDefined {\r\n    IStrategy(strategy()).withdrawAllToVault();\r\n  }\r\n\r\n  function withdraw(uint256 numberOfShares) external override {\r\n    require(totalSupply() > 0, \"Vault has no shares\");\r\n    require(numberOfShares > 0, \"numberOfShares must be greater than 0\");\r\n    uint256 totalShareSupply = totalSupply();\r\n    _burn(msg.sender, numberOfShares);\r\n\r\n    uint256 calculatedSharePrice = getPricePerFullShare();\r\n\r\n    uint256 underlyingAmountToWithdraw = numberOfShares\r\n      .mul(calculatedSharePrice)\r\n      .div(underlyingUnit());\r\n\r\n    if (underlyingAmountToWithdraw > underlyingBalanceInVault()) {\r\n      // withdraw everything from the strategy to accurately check the share value\r\n      if (numberOfShares == totalShareSupply) {\r\n        IStrategy(strategy()).withdrawAllToVault();\r\n        underlyingAmountToWithdraw = underlyingBalanceInVault();\r\n      } else {\r\n        uint256 missingUnderlying = underlyingAmountToWithdraw.sub(underlyingBalanceInVault());\r\n        uint256 missingShares = numberOfShares.mul(missingUnderlying).div(underlyingAmountToWithdraw);\r\n        // When withdrawing to vault here, the vault does not have any assets. Therefore,\r\n        // all the assets that are in the strategy match the total supply of shares, increased\r\n        // by the share proportion that was already burned at the beginning of this withdraw transaction.\r\n        IStrategyV2(strategy()).withdrawToVault(missingShares, (totalSupply()).add(missingShares));\r\n        // recalculate to improve accuracy\r\n        calculatedSharePrice = getPricePerFullShare();\r\n\r\n        uint256 updatedUnderlyingAmountToWithdraw = numberOfShares\r\n          .mul(calculatedSharePrice)\r\n          .div(underlyingUnit());\r\n\r\n        underlyingAmountToWithdraw = MathUpgradeable.min(\r\n          updatedUnderlyingAmountToWithdraw,\r\n          underlyingBalanceInVault()\r\n        );\r\n      }\r\n    }\r\n\r\n    IERC20Upgradeable(underlying()).safeTransfer(msg.sender, underlyingAmountToWithdraw);\r\n\r\n    // update the withdrawal amount for the holder\r\n    emit Withdraw(msg.sender, underlyingAmountToWithdraw);\r\n  }\r\n\r\n  function _deposit(uint256 amount, address sender, address beneficiary) internal {\r\n    require(amount > 0, \"Cannot deposit 0\");\r\n    require(beneficiary != address(0), \"holder must be defined\");\r\n\r\n    if (address(strategy()) != address(0)) {\r\n      require(IStrategy(strategy()).depositArbCheck(), \"Too much arb\");\r\n    }\r\n\r\n    uint256 toMint = amount.mul(underlyingUnit()).div(getPricePerFullShare());\r\n\r\n    _mint(beneficiary, toMint);\r\n\r\n    IERC20Upgradeable(underlying()).safeTransferFrom(sender, address(this), amount);\r\n\r\n    // update the contribution amount for the beneficiary\r\n    emit Deposit(beneficiary, amount);\r\n  }\r\n\r\n  /**\r\n  * Schedules an upgrade for this vault's proxy.\r\n  */\r\n  function scheduleUpgrade(address impl) public onlyGovernance {\r\n    _setNextImplementation(impl);\r\n    _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\r\n  }\r\n\r\n  function shouldUpgrade() external view override returns (bool, address) {\r\n    return (\r\n      nextImplementationTimestamp() != 0\r\n        && block.timestamp > nextImplementationTimestamp()\r\n        && nextImplementation() != address(0),\r\n      nextImplementation()\r\n    );\r\n  }\r\n\r\n  function finalizeUpgrade() external override onlyGovernance {\r\n    _setNextImplementation(address(0));\r\n    _setNextImplementationTimestamp(0);\r\n    // for vaults V3\r\n    _setAllowSharePriceDecrease(false);\r\n    _setWithdrawBeforeReinvesting(false);\r\n    require(!withdrawBeforeReinvesting(), \"withdrawBeforeReinvesting is incorrect\");\r\n    require(!allowSharePriceDecrease(), \"allowSharePriceDecrease is incorrect\");\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/hardworkInterface/IUpgradeSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IUpgradeSource {\r\n  function shouldUpgrade() external view returns (bool, address);\r\n  function finalizeUpgrade() external;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/@harvest-finance/hardworkInterface/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IStrategy {\r\n    \r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n    \r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/hardworkInterface/IStrategyV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IStrategyV2 {\r\n\r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n\r\n    // function governance() external view returns (address);\r\n    // function controller() external view returns (address);\r\n    // function underlying() external view returns (address);\r\n    // function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 correspondingShares, uint256 totalShares) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/hardworkInterface/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IVault {\r\n\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    // function store() external view returns (address);\r\n    // function governance() external view returns (address);\r\n    // function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address _strategy) external;\r\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\r\n\r\n    function deposit(uint256 amountWei) external;\r\n    function depositFor(uint256 amountWei, address holder) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/hardworkInterface/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IController {\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    // This grey list is only used in Vault.sol, see the code there for reference\r\n    function greyList(address _target) external view returns(bool);\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external;\r\n    function doHardWork(address _vault, uint256 hint, uint256 devianceNumerator, uint256 devianceDenominator) external;\r\n    function hasVault(address _vault) external returns(bool);\r\n\r\n    function salvage(address _token, uint256 amount) external;\r\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\r\n\r\n    function notifyFee(address _underlying, uint256 fee) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/ControllableInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {GovernableInit} from \"./GovernableInit.sol\";\r\nimport {Storage} from \"./Storage.sol\";\r\n\r\n// A clone of Governable supporting the Initializable interface and pattern\r\ncontract ControllableInit is GovernableInit {\r\n\r\n  constructor() public {\r\n  }\r\n\r\n  function initialize(address _storage) public override initializer {\r\n    GovernableInit.initialize(_storage);\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(Storage(_storage()).isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((Storage(_storage()).isController(msg.sender) || Storage(_storage()).isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return Storage(_storage()).controller();\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/VaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\ncontract VaultStorage is Initializable {\r\n\r\n  bytes32 internal constant _STRATEGY_SLOT = 0xf1a169aa0f736c2813818fdfbdc5755c31e0839c8f49831a16543496b28574ea;\r\n  bytes32 internal constant _UNDERLYING_SLOT = 0x1994607607e11d53306ef62e45e3bd85762c58d9bf38b5578bc4a258a26a7371;\r\n  bytes32 internal constant _UNDERLYING_UNIT_SLOT = 0xa66bc57d4b4eed7c7687876ca77997588987307cb13ecc23f5e52725192e5fff;\r\n  bytes32 internal constant _VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT = 0x39122c9adfb653455d0c05043bd52fcfbc2be864e832efd3abc72ce5a3d7ed5a;\r\n  bytes32 internal constant _VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT = 0x469a3bad2fab7b936c45eecd1f5da52af89cead3e2ed7f732b6f3fc92ed32308;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0xb1acf527cd7cd1668b30e5a9a1c0d845714604de29ce560150922c9d8c0937df;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x3bc747f4b148b37be485de3223c90b4468252967d2ea7f9fcbd8b6e653f434c9;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82ddc3be3f0c1a6870327f78f4979a0b37b21b16736ef5be6a7a7a35e530bcf0;\r\n  bytes32 internal constant _STRATEGY_TIME_LOCK_SLOT = 0x6d02338b2e4c913c0f7d380e2798409838a48a2c4d57d52742a808c82d713d8b;\r\n  bytes32 internal constant _FUTURE_STRATEGY_SLOT = 0xb441b53a4e42c2ca9182bc7ede99bedba7a5d9360d9dfbd31fa8ee2dc8590610;\r\n  bytes32 internal constant _STRATEGY_UPDATE_TIME_SLOT = 0x56e7c0e75875c6497f0de657009613a32558904b5c10771a825cc330feff7e72;\r\n  bytes32 internal constant _ALLOW_SHARE_PRICE_DECREASE_SLOT = 0x22f7033891e85fc76735ebd320e0d3f546da431c4729c2f6d2613b11923aaaed;\r\n  bytes32 internal constant _WITHDRAW_BEFORE_REINVESTING_SLOT = 0x4215fbb95dc0890d3e1660fb9089350f2d3f350c0a756934874cae6febf42a79;\r\n\r\n  constructor() public {\r\n    assert(_STRATEGY_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.strategy\")) - 1));\r\n    assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.underlying\")) - 1));\r\n    assert(_UNDERLYING_UNIT_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.underlyingUnit\")) - 1));\r\n    assert(_VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.vaultFractionToInvestNumerator\")) - 1));\r\n    assert(_VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.vaultFractionToInvestDenominator\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.nextImplementation\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.nextImplementationTimestamp\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.nextImplementationDelay\")) - 1));\r\n    assert(_STRATEGY_TIME_LOCK_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.strategyTimeLock\")) - 1));\r\n    assert(_FUTURE_STRATEGY_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.futureStrategy\")) - 1));\r\n    assert(_STRATEGY_UPDATE_TIME_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.strategyUpdateTime\")) - 1));\r\n    assert(_ALLOW_SHARE_PRICE_DECREASE_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.allowSharePriceDecrease\")) - 1));\r\n    assert(_WITHDRAW_BEFORE_REINVESTING_SLOT == bytes32(uint256(keccak256(\"eip1967.vaultStorage.withdrawBeforeReinvesting\")) - 1));\r\n  }\r\n\r\n  function initialize(\r\n    address _underlying,\r\n    uint256 _toInvestNumerator,\r\n    uint256 _toInvestDenominator,\r\n    uint256 _underlyingUnit,\r\n    uint256 _implementationChangeDelay,\r\n    uint256 _strategyChangeDelay\r\n  ) public initializer {\r\n    _setUnderlying(_underlying);\r\n    _setVaultFractionToInvestNumerator(_toInvestNumerator);\r\n    _setVaultFractionToInvestDenominator(_toInvestDenominator);\r\n    _setUnderlyingUnit(_underlyingUnit);\r\n    _setNextImplementationDelay(_implementationChangeDelay);\r\n    _setStrategyTimeLock(_strategyChangeDelay);\r\n    _setStrategyUpdateTime(0);\r\n    _setFutureStrategy(address(0));\r\n    _setAllowSharePriceDecrease(false);\r\n    _setWithdrawBeforeReinvesting(false);\r\n  }\r\n\r\n  function _setStrategy(address _address) internal {\r\n    setAddress(_STRATEGY_SLOT, _address);\r\n  }\r\n\r\n  function _strategy() internal view returns (address) {\r\n    return getAddress(_STRATEGY_SLOT);\r\n  }\r\n\r\n  function _setUnderlying(address _address) internal {\r\n    setAddress(_UNDERLYING_SLOT, _address);\r\n  }\r\n\r\n  function _underlying() internal view returns (address) {\r\n    return getAddress(_UNDERLYING_SLOT);\r\n  }\r\n\r\n  function _setUnderlyingUnit(uint256 _value) internal {\r\n    setUint256(_UNDERLYING_UNIT_SLOT, _value);\r\n  }\r\n\r\n  function _underlyingUnit() internal view returns (uint256) {\r\n    return getUint256(_UNDERLYING_UNIT_SLOT);\r\n  }\r\n\r\n  function _setVaultFractionToInvestNumerator(uint256 _value) internal {\r\n    setUint256(_VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT, _value);\r\n  }\r\n\r\n  function _vaultFractionToInvestNumerator() internal view returns (uint256) {\r\n    return getUint256(_VAULT_FRACTION_TO_INVEST_NUMERATOR_SLOT);\r\n  }\r\n\r\n  function _setVaultFractionToInvestDenominator(uint256 _value) internal {\r\n    setUint256(_VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT, _value);\r\n  }\r\n\r\n  function _vaultFractionToInvestDenominator() internal view returns (uint256) {\r\n    return getUint256(_VAULT_FRACTION_TO_INVEST_DENOMINATOR_SLOT);\r\n  }\r\n\r\n  function _setAllowSharePriceDecrease(bool _value) internal {\r\n    setBoolean(_ALLOW_SHARE_PRICE_DECREASE_SLOT, _value);\r\n  }\r\n\r\n  function _allowSharePriceDecrease() internal view returns (bool) {\r\n    return getBoolean(_ALLOW_SHARE_PRICE_DECREASE_SLOT);\r\n  }\r\n\r\n  function _setWithdrawBeforeReinvesting(bool _value) internal {\r\n    setBoolean(_WITHDRAW_BEFORE_REINVESTING_SLOT, _value);\r\n  }\r\n\r\n  function _withdrawBeforeReinvesting() internal view returns (bool) {\r\n    return getBoolean(_WITHDRAW_BEFORE_REINVESTING_SLOT);\r\n  }\r\n\r\n  function _setNextImplementation(address _address) internal {\r\n    setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\r\n  }\r\n\r\n  function _nextImplementation() internal view returns (address) {\r\n    return getAddress(_NEXT_IMPLEMENTATION_SLOT);\r\n  }\r\n\r\n  function _setNextImplementationTimestamp(uint256 _value) internal {\r\n    setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\r\n  }\r\n\r\n  function _nextImplementationTimestamp() internal view returns (uint256) {\r\n    return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\r\n  }\r\n\r\n  function _setNextImplementationDelay(uint256 _value) internal {\r\n    setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\r\n  }\r\n\r\n  function _nextImplementationDelay() internal view returns (uint256) {\r\n    return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\r\n  }\r\n\r\n  function _setStrategyTimeLock(uint256 _value) internal {\r\n    setUint256(_STRATEGY_TIME_LOCK_SLOT, _value);\r\n  }\r\n\r\n  function _strategyTimeLock() internal view returns (uint256) {\r\n    return getUint256(_STRATEGY_TIME_LOCK_SLOT);\r\n  }\r\n\r\n  function _setFutureStrategy(address _value) internal {\r\n    setAddress(_FUTURE_STRATEGY_SLOT, _value);\r\n  }\r\n\r\n  function _futureStrategy() internal view returns (address) {\r\n    return getAddress(_FUTURE_STRATEGY_SLOT);\r\n  }\r\n\r\n  function _setStrategyUpdateTime(uint256 _value) internal {\r\n    setUint256(_STRATEGY_UPDATE_TIME_SLOT, _value);\r\n  }\r\n\r\n  function _strategyUpdateTime() internal view returns (uint256) {\r\n    return getUint256(_STRATEGY_UPDATE_TIME_SLOT);\r\n  }\r\n\r\n  function setBoolean(bytes32 slot, bool _value) internal {\r\n    setUint256(slot, _value ? 1 : 0);\r\n  }\r\n\r\n  function getBoolean(bytes32 slot) internal view returns (bool) {\r\n    return (getUint256(slot) == 1);\r\n  }\r\n\r\n  function setAddress(bytes32 slot, address _address) private {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, _address)\r\n    }\r\n  }\r\n\r\n  function setUint256(bytes32 slot, uint256 _value) private {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, _value)\r\n    }\r\n  }\r\n\r\n  function getAddress(bytes32 slot) private view returns (address str) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  function getUint256(bytes32 slot) private view returns (uint256 str) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/lib/@harvest-finance/GovernableInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {Storage} from \"./Storage.sol\";\r\n\r\n// A clone of Governable supporting the Initializable interface and pattern\r\ncontract GovernableInit is Initializable {\r\n\r\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\r\n\r\n  modifier onlyGovernance() {\r\n    require(Storage(_storage()).isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\"eip1967.governableInit.storage\")) - 1));\r\n  }\r\n\r\n  function initialize(address _store) public virtual initializer {\r\n    _setStorage(_store);\r\n  }\r\n\r\n  function _setStorage(address newStorage) private {\r\n    bytes32 slot = _STORAGE_SLOT;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, newStorage)\r\n    }\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    _setStorage(_store);\r\n  }\r\n\r\n  function _storage() internal view returns (address str) {\r\n    bytes32 slot = _STORAGE_SLOT;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return Storage(_storage()).governance();\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/strategies/upgradability/BaseUpgradeableStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\ncontract BaseUpgradeableStrategyStorage {\r\n\r\n  bytes32 internal constant _UNDERLYING_SLOT = 0xa1709211eeccf8f4ad5b6700d52a1a9525b5f5ae1e9e5f9e5a0c2fc23c86e530;\r\n  bytes32 internal constant _VAULT_SLOT = 0xefd7c7d9ef1040fc87e7ad11fe15f86e1d11e1df03c6d7c87f7e1f4041f08d41;\r\n\r\n  bytes32 internal constant _REWARD_TOKEN_SLOT = 0xdae0aafd977983cb1e78d8f638900ff361dc3c48c43118ca1dd77d1af3f47bbf;\r\n  bytes32 internal constant _REWARD_POOL_SLOT = 0x3d9bb16e77837e25cada0cf894835418b38e8e18fbec6cfd192eb344bebfa6b8;\r\n  bytes32 internal constant _SELL_FLOOR_SLOT = 0xc403216a7704d160f6a3b5c3b149a1226a6080f0a5dd27b27d9ba9c022fa0afc;\r\n  bytes32 internal constant _SELL_SLOT = 0x656de32df98753b07482576beb0d00a6b949ebf84c066c765f54f26725221bb6;\r\n  bytes32 internal constant _PAUSED_INVESTING_SLOT = 0xa07a20a2d463a602c2b891eb35f244624d9068572811f63d0e094072fb54591a;\r\n\r\n  bytes32 internal constant _PROFIT_SHARING_NUMERATOR_SLOT = 0xe3ee74fb7893020b457d8071ed1ef76ace2bf4903abd7b24d3ce312e9c72c029;\r\n  bytes32 internal constant _PROFIT_SHARING_DENOMINATOR_SLOT = 0x0286fd414602b432a8c80a0125e9a25de9bba96da9d5068c832ff73f09208a3b;\r\n\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_SLOT = 0x29f7fcd4fe2517c1963807a1ec27b0e45e67c60a874d5eeac7a0b1ab1bb84447;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_TIMESTAMP_SLOT = 0x414c5263b05428f1be1bfa98e25407cc78dd031d0d3cd2a2e3d63b488804f22e;\r\n  bytes32 internal constant _NEXT_IMPLEMENTATION_DELAY_SLOT = 0x82b330ca72bcd6db11a26f10ce47ebcfe574a9c646bccbc6f1cd4478eae16b31;\r\n\r\n  constructor() public {\r\n    assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.underlying\")) - 1));\r\n    assert(_VAULT_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.vault\")) - 1));\r\n    assert(_REWARD_TOKEN_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.rewardToken\")) - 1));\r\n    assert(_REWARD_POOL_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.rewardPool\")) - 1));\r\n    assert(_SELL_FLOOR_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.sellFloor\")) - 1));\r\n    assert(_SELL_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.sell\")) - 1));\r\n    assert(_PAUSED_INVESTING_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.pausedInvesting\")) - 1));\r\n\r\n    assert(_PROFIT_SHARING_NUMERATOR_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.profitSharingNumerator\")) - 1));\r\n    assert(_PROFIT_SHARING_DENOMINATOR_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.profitSharingDenominator\")) - 1));\r\n\r\n    assert(_NEXT_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.nextImplementation\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.nextImplementationTimestamp\")) - 1));\r\n    assert(_NEXT_IMPLEMENTATION_DELAY_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.nextImplementationDelay\")) - 1));\r\n  }\r\n\r\n  function _setUnderlying(address _address) internal {\r\n    setAddress(_UNDERLYING_SLOT, _address);\r\n  }\r\n\r\n  function underlying() public view returns (address) {\r\n    return getAddress(_UNDERLYING_SLOT);\r\n  }\r\n\r\n  function _setRewardPool(address _address) internal {\r\n    setAddress(_REWARD_POOL_SLOT, _address);\r\n  }\r\n\r\n  function rewardPool() public view returns (address) {\r\n    return getAddress(_REWARD_POOL_SLOT);\r\n  }\r\n\r\n  function _setRewardToken(address _address) internal {\r\n    setAddress(_REWARD_TOKEN_SLOT, _address);\r\n  }\r\n\r\n  function rewardToken() public view returns (address) {\r\n    return getAddress(_REWARD_TOKEN_SLOT);\r\n  }\r\n\r\n  function _setVault(address _address) internal {\r\n    setAddress(_VAULT_SLOT, _address);\r\n  }\r\n\r\n  function vault() public view returns (address) {\r\n    return getAddress(_VAULT_SLOT);\r\n  }\r\n\r\n  // a flag for disabling selling for simplified emergency exit\r\n  function _setSell(bool _value) internal {\r\n    setBoolean(_SELL_SLOT, _value);\r\n  }\r\n\r\n  function sell() public view returns (bool) {\r\n    return getBoolean(_SELL_SLOT);\r\n  }\r\n\r\n  function _setPausedInvesting(bool _value) internal {\r\n    setBoolean(_PAUSED_INVESTING_SLOT, _value);\r\n  }\r\n\r\n  function pausedInvesting() public view returns (bool) {\r\n    return getBoolean(_PAUSED_INVESTING_SLOT);\r\n  }\r\n\r\n  function _setSellFloor(uint256 _value) internal {\r\n    setUint256(_SELL_FLOOR_SLOT, _value);\r\n  }\r\n\r\n  function sellFloor() public view returns (uint256) {\r\n    return getUint256(_SELL_FLOOR_SLOT);\r\n  }\r\n\r\n  function _setProfitSharingNumerator(uint256 _value) internal {\r\n    setUint256(_PROFIT_SHARING_NUMERATOR_SLOT, _value);\r\n  }\r\n\r\n  function profitSharingNumerator() public view returns (uint256) {\r\n    return getUint256(_PROFIT_SHARING_NUMERATOR_SLOT);\r\n  }\r\n\r\n  function _setProfitSharingDenominator(uint256 _value) internal {\r\n    setUint256(_PROFIT_SHARING_DENOMINATOR_SLOT, _value);\r\n  }\r\n\r\n  function profitSharingDenominator() public view returns (uint256) {\r\n    return getUint256(_PROFIT_SHARING_DENOMINATOR_SLOT);\r\n  }\r\n\r\n  // upgradeability\r\n\r\n  function _setNextImplementation(address _address) internal {\r\n    setAddress(_NEXT_IMPLEMENTATION_SLOT, _address);\r\n  }\r\n\r\n  function nextImplementation() public view returns (address) {\r\n    return getAddress(_NEXT_IMPLEMENTATION_SLOT);\r\n  }\r\n\r\n  function _setNextImplementationTimestamp(uint256 _value) internal {\r\n    setUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT, _value);\r\n  }\r\n\r\n  function nextImplementationTimestamp() public view returns (uint256) {\r\n    return getUint256(_NEXT_IMPLEMENTATION_TIMESTAMP_SLOT);\r\n  }\r\n\r\n  function _setNextImplementationDelay(uint256 _value) internal {\r\n    setUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT, _value);\r\n  }\r\n\r\n  function nextImplementationDelay() public view returns (uint256) {\r\n    return getUint256(_NEXT_IMPLEMENTATION_DELAY_SLOT);\r\n  }\r\n\r\n  function setBoolean(bytes32 slot, bool _value) internal {\r\n    setUint256(slot, _value ? 1 : 0);\r\n  }\r\n\r\n  function getBoolean(bytes32 slot) internal view returns (bool) {\r\n    return (getUint256(slot) == 1);\r\n  }\r\n\r\n  function setAddress(bytes32 slot, address _address) internal {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, _address)\r\n    }\r\n  }\r\n\r\n  function setUint256(bytes32 slot, uint256 _value) internal {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      sstore(slot, _value)\r\n    }\r\n  }\r\n\r\n  function getAddress(bytes32 slot) internal view returns (address str) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n\r\n  function getUint256(bytes32 slot) internal view returns (uint256 str) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      str := sload(slot)\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/strategies/upgradability/BaseUpgradeableStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {BaseUpgradeableStrategyStorage} from \"./BaseUpgradeableStrategyStorage.sol\";\r\nimport {ControllableInit} from \"../../ControllableInit.sol\";\r\nimport {IController} from \"../../hardworkInterface/IController.sol\";\r\nimport {IBEP20} from \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport {SafeMath} from \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport {SafeBEP20} from \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\n\r\ncontract BaseUpgradeableStrategy is Initializable, ControllableInit, BaseUpgradeableStrategyStorage {\r\n  using SafeMath for uint256;\r\n  using SafeBEP20 for IBEP20;\r\n\r\n  event ProfitsNotCollected(bool sell, bool floor);\r\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n\r\n  modifier restricted() {\r\n    require(msg.sender == vault() || msg.sender == controller()\r\n      || msg.sender == governance(),\r\n      \"The sender has to be the controller, governance, or vault\");\r\n    _;\r\n  }\r\n\r\n  // This is only used in `investAllUnderlying()`\r\n  // The user can still freely withdraw from the strategy\r\n  modifier onlyNotPausedInvesting() {\r\n    require(!pausedInvesting(), \"Action blocked as the strategy is in emergency state\");\r\n    _;\r\n  }\r\n\r\n  constructor() public BaseUpgradeableStrategyStorage() {\r\n  }\r\n\r\n  function initialize(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _rewardPool,\r\n    address _rewardToken,\r\n    uint256 _profitSharingNumerator,\r\n    uint256 _profitSharingDenominator,\r\n    bool _sell,\r\n    uint256 _sellFloor,\r\n    uint256 _implementationChangeDelay\r\n  ) public initializer {\r\n    ControllableInit.initialize(\r\n      _storage\r\n    );\r\n    _setUnderlying(_underlying);\r\n    _setVault(_vault);\r\n    _setRewardPool(_rewardPool);\r\n    _setRewardToken(_rewardToken);\r\n    _setProfitSharingNumerator(_profitSharingNumerator);\r\n    _setProfitSharingDenominator(_profitSharingDenominator);\r\n\r\n    _setSell(_sell);\r\n    _setSellFloor(_sellFloor);\r\n    _setNextImplementationDelay(_implementationChangeDelay);\r\n    _setPausedInvesting(false);\r\n  }\r\n\r\n  /**\r\n  * Schedules an upgrade for this vault's proxy.\r\n  */\r\n  function scheduleUpgrade(address impl) public onlyGovernance {\r\n    _setNextImplementation(impl);\r\n    _setNextImplementationTimestamp(block.timestamp.add(nextImplementationDelay()));\r\n  }\r\n\r\n  function _finalizeUpgrade() internal {\r\n    _setNextImplementation(address(0));\r\n    _setNextImplementationTimestamp(0);\r\n  }\r\n\r\n  function shouldUpgrade() external view returns (bool, address) {\r\n    return (\r\n      nextImplementationTimestamp() != 0\r\n        && block.timestamp > nextImplementationTimestamp()\r\n        && nextImplementation() != address(0),\r\n      nextImplementation()\r\n    );\r\n  }\r\n\r\n  // reward notification\r\n\r\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\r\n    if( _rewardBalance > 0 ){\r\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator()).div(profitSharingDenominator());\r\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\r\n      IBEP20(rewardToken()).safeApprove(controller(), 0);\r\n      IBEP20(rewardToken()).safeApprove(controller(), feeAmount);\r\n\r\n      IController(controller()).notifyFee(\r\n        rewardToken(),\r\n        feeAmount\r\n      );\r\n    } else {\r\n      emit ProfitLogInReward(0, 0, block.timestamp);\r\n    }\r\n  }\r\n}\r\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, 'SafeMath: addition overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, 'SafeMath: subtraction overflow');\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, 'SafeMath: multiplication overflow');\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, 'SafeMath: division by zero');\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, 'SafeMath: modulo by zero');\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport './IBEP20.sol';\nimport '../../math/SafeMath.sol';\nimport '../../utils/Address.sol';\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            'SafeBEP20: approve from non-zero to non-zero allowance'\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            'SafeBEP20: decreased allowance below zero'\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\n        }\n    }\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, 'Address: low-level call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), 'Address: call to non-contract');\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/pancakeswap/PancakeMasterChefLPStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"./IMasterChef.sol\";\r\nimport \"../../lib/@harvest-finance/hardworkInterface/IStrategyV2.sol\";\r\n// import \"@openzeppelin/contracts/math/Math.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\nimport \"../../lib/@harvest-finance/hardworkInterface/IStrategy.sol\";\r\nimport \"../../lib/@harvest-finance/hardworkInterface/IVault.sol\";\r\nimport \"../../lib/@harvest-finance/strategies/upgradability/BaseUpgradeableStrategy.sol\";\r\nimport \"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\ncontract PancakeMasterChefLPStrategy is IStrategyV2, BaseUpgradeableStrategy {\r\n  using SafeMath for uint256;\r\n  using SafeBEP20 for IBEP20;\r\n\r\n  address public constant uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  address public constant sushiswapRouterV2 = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n  // additional storage slots (on top of BaseUpgradeableStrategy ones) are defined here\r\n  bytes32 internal constant _POOLID_SLOT = 0x3fd729bfa2e28b7806b03a6e014729f59477b530f995be4d51defc9dad94810b;\r\n  bytes32 internal constant _USE_UNI_SLOT = 0x1132c1de5e5b6f1c4c7726265ddcf1f4ae2a9ecf258a0002de174248ecbf2c7a;\r\n\r\n  // this would be reset on each upgrade\r\n  mapping (address => address[]) public uniswapRoutes;\r\n  mapping (address => address[]) public sushiswapRoutes;\r\n\r\n  constructor() public BaseUpgradeableStrategy() {\r\n    assert(_POOLID_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.poolId\")) - 1));\r\n    assert(_USE_UNI_SLOT == bytes32(uint256(keccak256(\"eip1967.strategyStorage.useUni\")) - 1));\r\n  }\r\n\r\n  function initializeStrategy(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _rewardPool,\r\n    address _rewardToken,\r\n    uint256 _poolID\r\n  ) public initializer {\r\n\r\n    BaseUpgradeableStrategy.initialize(\r\n      _storage,\r\n      _underlying,\r\n      _vault,\r\n      _rewardPool,\r\n      _rewardToken,\r\n      300, // profit sharing numerator\r\n      1000, // profit sharing denominator\r\n      true, // sell\r\n      1e18, // sell floor\r\n      12 hours // implementation change delay\r\n    );\r\n\r\n    address _lpt;\r\n    (_lpt,,,) = IMasterChef(rewardPool()).poolInfo(_poolID);\r\n    require(_lpt == underlying(), \"Pool Info does not match underlying\");\r\n    _setPoolId(_poolID);\r\n\r\n    address uniLPComponentToken0 = IPancakePair(underlying()).token0();\r\n    address uniLPComponentToken1 = IPancakePair(underlying()).token1();\r\n\r\n    // these would be required to be initialized separately by governance\r\n    uniswapRoutes[uniLPComponentToken0] = new address[](0);\r\n    uniswapRoutes[uniLPComponentToken1] = new address[](0);\r\n    sushiswapRoutes[uniLPComponentToken0] = new address[](0);\r\n    sushiswapRoutes[uniLPComponentToken1] = new address[](0);\r\n\r\n    setBoolean(_USE_UNI_SLOT, true);\r\n  }\r\n\r\n  function depositArbCheck() public view override returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function rewardPoolBalance() internal view returns (uint256 bal) {\r\n      (bal,) = IMasterChef(rewardPool()).userInfo(poolId(), address(this));\r\n  }\r\n\r\n  function exitRewardPool() internal {\r\n      uint256 bal = rewardPoolBalance();\r\n      if (bal != 0) {\r\n          IMasterChef(rewardPool()).withdraw(poolId(), bal);\r\n      }\r\n  }\r\n\r\n  function unsalvagableTokens(address token) public view override returns (bool) {\r\n    return (token == rewardToken() || token == underlying());\r\n  }\r\n\r\n  function enterRewardPool() internal {\r\n    uint256 entireBalance = IBEP20(underlying()).balanceOf(address(this));\r\n    IBEP20(underlying()).safeApprove(rewardPool(), 0);\r\n    IBEP20(underlying()).safeApprove(rewardPool(), entireBalance);\r\n    IMasterChef(rewardPool()).deposit(poolId(), entireBalance);\r\n  }\r\n\r\n  /*\r\n  *   In case there are some issues discovered about the pool or underlying asset\r\n  *   Governance can exit the pool properly\r\n  *   The function is only used for emergency to exit the pool\r\n  */\r\n  function emergencyExit() public onlyGovernance {\r\n    exitRewardPool();\r\n    _setPausedInvesting(true);\r\n  }\r\n\r\n  /*\r\n  *   Resumes the ability to invest into the underlying reward pools\r\n  */\r\n\r\n  function continueInvesting() public onlyGovernance {\r\n    _setPausedInvesting(false);\r\n  }\r\n\r\n  function setLiquidationPathsOnUni(address [] memory _uniswapRouteToToken0, address [] memory _uniswapRouteToToken1) public onlyGovernance {\r\n    address uniLPComponentToken0 = IPancakePair(underlying()).token0();\r\n    address uniLPComponentToken1 = IPancakePair(underlying()).token1();\r\n    uniswapRoutes[uniLPComponentToken0] = _uniswapRouteToToken0;\r\n    uniswapRoutes[uniLPComponentToken1] = _uniswapRouteToToken1;\r\n  }\r\n\r\n  function setLiquidationPathsOnSushi(address [] memory _uniswapRouteToToken0, address [] memory _uniswapRouteToToken1) public onlyGovernance {\r\n    address uniLPComponentToken0 = IPancakePair(underlying()).token0();\r\n    address uniLPComponentToken1 = IPancakePair(underlying()).token1();\r\n    sushiswapRoutes[uniLPComponentToken0] = _uniswapRouteToToken0;\r\n    sushiswapRoutes[uniLPComponentToken1] = _uniswapRouteToToken1;\r\n  }\r\n\r\n  // We assume that all the tradings can be done on Uniswap\r\n  function _liquidateReward() internal {\r\n    uint256 rewardBalance = IBEP20(rewardToken()).balanceOf(address(this));\r\n    if (!sell() || rewardBalance < sellFloor()) {\r\n      // Profits can be disabled for possible simplified and rapid exit\r\n      emit ProfitsNotCollected(sell(), rewardBalance < sellFloor());\r\n      return;\r\n    }\r\n\r\n    notifyProfitInRewardToken(rewardBalance);\r\n    uint256 remainingRewardBalance = IBEP20(rewardToken()).balanceOf(address(this));\r\n\r\n    address uniLPComponentToken0 = IPancakePair(underlying()).token0();\r\n    address uniLPComponentToken1 = IPancakePair(underlying()).token1();\r\n\r\n    address[] memory routesToken0;\r\n    address[] memory routesToken1;\r\n    address routerV2;\r\n\r\n    if(useUni()) {\r\n      routerV2 = uniswapRouterV2;\r\n      routesToken0 = uniswapRoutes[address(uniLPComponentToken0)];\r\n      routesToken1 = uniswapRoutes[address(uniLPComponentToken1)];\r\n    } else {\r\n      routerV2 = sushiswapRouterV2;\r\n      routesToken0 = sushiswapRoutes[address(uniLPComponentToken0)];\r\n      routesToken1 = sushiswapRoutes[address(uniLPComponentToken1)];\r\n    }\r\n\r\n\r\n    if (remainingRewardBalance > 0 // we have tokens to swap\r\n      && routesToken0.length > 1 // and we have a route to do the swap\r\n      && routesToken1.length > 1 // and we have a route to do the swap\r\n    ) {\r\n\r\n      // allow Uniswap to sell our reward\r\n      uint256 amountOutMin = 1;\r\n\r\n      IBEP20(rewardToken()).safeApprove(routerV2, 0);\r\n      IBEP20(rewardToken()).safeApprove(routerV2, remainingRewardBalance);\r\n\r\n      uint256 toToken0 = remainingRewardBalance / 2;\r\n      uint256 toToken1 = remainingRewardBalance.sub(toToken0);\r\n\r\n      // we sell to uni\r\n\r\n      // sell Uni to token1\r\n      // we can accept 1 as minimum because this is called only by a trusted role\r\n      IUniswapV2Router02(routerV2).swapExactTokensForTokens(\r\n        toToken0,\r\n        amountOutMin,\r\n        routesToken0,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n      uint256 token0Amount = IBEP20(uniLPComponentToken0).balanceOf(address(this));\r\n\r\n      // sell Uni to token2\r\n      // we can accept 1 as minimum because this is called only by a trusted role\r\n      IUniswapV2Router02(routerV2).swapExactTokensForTokens(\r\n        toToken1,\r\n        amountOutMin,\r\n        routesToken1,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n      uint256 token1Amount = IBEP20(uniLPComponentToken1).balanceOf(address(this));\r\n\r\n      // provide token1 and token2 to SUSHI\r\n      IBEP20(uniLPComponentToken0).safeApprove(sushiswapRouterV2, 0);\r\n      IBEP20(uniLPComponentToken0).safeApprove(sushiswapRouterV2, token0Amount);\r\n\r\n      IBEP20(uniLPComponentToken1).safeApprove(sushiswapRouterV2, 0);\r\n      IBEP20(uniLPComponentToken1).safeApprove(sushiswapRouterV2, token1Amount);\r\n\r\n      // we provide liquidity to sushi\r\n      uint256 liquidity;\r\n      (,,liquidity) = IUniswapV2Router02(sushiswapRouterV2).addLiquidity(\r\n        uniLPComponentToken0,\r\n        uniLPComponentToken1,\r\n        token0Amount,\r\n        token1Amount,\r\n        1,  // we are willing to take whatever the pair gives us\r\n        1,  // we are willing to take whatever the pair gives us\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Stakes everything the strategy holds into the reward pool\r\n  */\r\n  function investAllUnderlying() internal onlyNotPausedInvesting {\r\n    // this check is needed, because most of the SNX reward pools will revert if\r\n    // you try to stake(0).\r\n    if(IBEP20(underlying()).balanceOf(address(this)) > 0) {\r\n      enterRewardPool();\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Withdraws all the asset to the vault\r\n  */\r\n  function withdrawAllToVault() public override restricted {\r\n    if (address(rewardPool()) != address(0)) {\r\n      exitRewardPool();\r\n    }\r\n    _liquidateReward();\r\n    IBEP20(underlying()).safeTransfer(vault(), IBEP20(underlying()).balanceOf(address(this)));\r\n  }\r\n\r\n  /*\r\n  *   Withdraws all the asset to the vault\r\n  */\r\n  function withdrawToVault(uint256 amount) public restricted {\r\n    // Typically there wouldn't be any amount here\r\n    // however, it is possible because of the emergencyExit\r\n    uint256 entireBalance = IBEP20(underlying()).balanceOf(address(this));\r\n\r\n    if(amount > entireBalance){\r\n      // While we have the check above, we still using SafeMath below\r\n      // for the peace of mind (in case something gets changed in between)\r\n      uint256 needToWithdraw = amount.sub(entireBalance);\r\n      uint256 toWithdraw = SafeMath.min(rewardPoolBalance(), needToWithdraw);\r\n      IMasterChef(rewardPool()).withdraw(poolId(), toWithdraw);\r\n    }\r\n\r\n    IBEP20(underlying()).safeTransfer(vault(), amount);\r\n  }\r\n\r\n  function withdrawToVault(uint256 correspondingShares, uint256 totalShares)  public override restricted {\r\n\r\n  }\r\n\r\n  /*\r\n  *   Note that we currently do not have a mechanism here to include the\r\n  *   amount of reward that is accrued.\r\n  */\r\n  function investedUnderlyingBalance() external view override returns (uint256) {\r\n    if (rewardPool() == address(0)) {\r\n      return IBEP20(underlying()).balanceOf(address(this));\r\n    }\r\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\r\n    // both are in the units of \"underlying\"\r\n    // The second part is needed because there is the emergency exit mechanism\r\n    // which would break the assumption that all the funds are always inside of the reward pool\r\n    return rewardPoolBalance().add(IBEP20(underlying()).balanceOf(address(this)));\r\n  }\r\n\r\n  /*\r\n  *   Governance or Controller can claim coins that are somehow transferred into the contract\r\n  *   Note that they cannot come in take away coins that are used and defined in the strategy itself\r\n  */\r\n  function salvage(address recipient, address token, uint256 amount) external override onlyControllerOrGovernance {\r\n     // To make sure that governance cannot come in and take away the coins\r\n    require(!unsalvagableTokens(token), \"token is defined as not salvagable\");\r\n    IBEP20(token).safeTransfer(recipient, amount);\r\n  }\r\n\r\n  /*\r\n  *   Get the reward, sell it in exchange for underlying, invest what you got.\r\n  *   It's not much, but it's honest work.\r\n  *\r\n  *   Note that although `onlyNotPausedInvesting` is not added here,\r\n  *   calling `investAllUnderlying()` affectively blocks the usage of `doHardWork`\r\n  *   when the investing is being paused by governance.\r\n  */\r\n  function doHardWork() external override onlyNotPausedInvesting restricted {\r\n    exitRewardPool();\r\n    _liquidateReward();\r\n    investAllUnderlying();\r\n  }\r\n\r\n  /**\r\n  * Can completely disable claiming UNI rewards and selling. Good for emergency withdraw in the\r\n  * simplest possible way.\r\n  */\r\n  function setSell(bool s) public onlyGovernance {\r\n    _setSell(s);\r\n  }\r\n\r\n  /**\r\n  * Sets the minimum amount of CRV needed to trigger a sale.\r\n  */\r\n  function setSellFloor(uint256 floor) public onlyGovernance {\r\n    _setSellFloor(floor);\r\n  }\r\n\r\n  // masterchef rewards pool ID\r\n  function _setPoolId(uint256 _value) internal {\r\n    setUint256(_POOLID_SLOT, _value);\r\n  }\r\n\r\n  function poolId() public view returns (uint256) {\r\n    return getUint256(_POOLID_SLOT);\r\n  }\r\n\r\n  function setUseUni(bool _value) public onlyGovernance {\r\n    setBoolean(_USE_UNI_SLOT, _value);\r\n  }\r\n\r\n  function useUni() public view returns (bool) {\r\n    return getBoolean(_USE_UNI_SLOT);\r\n  }\r\n\r\n  function finalizeUpgrade() external onlyGovernance {\r\n    _finalizeUpgrade();\r\n    // reset the liquidation paths\r\n    // they need to be re-set manually\r\n    address uniLPComponentToken0 = IPancakePair(underlying()).token0();\r\n    address uniLPComponentToken1 = IPancakePair(underlying()).token1();\r\n\r\n    // these would be required to be initialized separately by governance\r\n    uniswapRoutes[uniLPComponentToken0] = new address[](0);\r\n    uniswapRoutes[uniLPComponentToken1] = new address[](0);\r\n    sushiswapRoutes[uniLPComponentToken0] = new address[](0);\r\n    sushiswapRoutes[uniLPComponentToken1] = new address[](0);\r\n  }\r\n}"
    },
    "contracts/strategies/pancakeswap/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IMasterChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt);\r\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint256, uint256, uint256);\r\n    function massUpdatePools() external;\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256 amount);\r\n    // interface reused for pickle\r\n    function pendingPickle(uint256 _pid, address _user) external view returns (uint256 amount);\r\n}\r\n"
    },
    "@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/lib/@harvest-finance/FeeRewardForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"./Governable.sol\";\r\nimport \"./hardworkInterface/IRewardPool.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\n\r\n// FeeRewardForwarder with no grain config\r\ncontract FeeRewardForwarder is Governable {\r\n  using SafeBEP20 for IBEP20;\r\n  using SafeMath for uint256;\r\n\r\n  address public farm;\r\n\r\n  // stables\r\n  address constant public usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n  address constant public vai = address(0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7);\r\n\r\n  // yield farming\r\n  address constant public cake = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\r\n  address constant public xvs = address(0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63);\r\n\r\n  // wbnb\r\n  address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n\r\n  mapping (address => mapping (address => address[])) public pancakeswapRoutes;\r\n  \r\n  // the targeted reward token to convert everything to\r\n  address public targetToken;\r\n  address public profitSharingPool;\r\n\r\n  address constant public pancakeswapRouterV2 = address(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\r\n\r\n  event TokenPoolSet(address token, address pool);\r\n\r\n  constructor(address _storage, address _farm) public Governable(_storage) {\r\n    require(_farm != address(0), \"_farm not defined\");\r\n    farm = _farm;\r\n\r\n    pancakeswapRoutes[cake][wbnb] = [cake, wbnb];\r\n    pancakeswapRoutes[xvs][wbnb] = [xvs, wbnb];\r\n    \r\n    // // Route to grain is always to farm then to grain.\r\n    // // So we will just use the existing route to buy FARM first\r\n    // // then sell partially to grain.\r\n    // pancakeswapRoutes[grain][farm] = [grain, farm];\r\n    // pancakeswapRoutes[farm][grain] = [farm, grain];\r\n\r\n    // // preset for grainBacker (usdc or weth)\r\n    // //weth\r\n    // pancakeswapRoutes[dai][weth] = [dai, weth];\r\n    // pancakeswapRoutes[usdc][weth] = [usdc, weth];\r\n    // pancakeswapRoutes[usdt][weth] = [usdt, weth];\r\n\r\n    // pancakeswapRoutes[wbtc][weth] = [wbtc, weth];\r\n    // pancakeswapRoutes[renBTC][weth] = [renBTC, weth];\r\n    // pancakeswapRoutes[sushi][weth] = [sushi, weth];\r\n    // pancakeswapRoutes[dego][weth] = [dego, weth];\r\n    // pancakeswapRoutes[crv][weth] = [crv, weth];\r\n    // pancakeswapRoutes[comp][weth] = [comp, weth];\r\n\r\n    // // usdc\r\n    // pancakeswapRoutes[weth][usdc] = [weth, usdc];\r\n    // pancakeswapRoutes[dai][usdc] = [dai, weth, usdc];\r\n    // pancakeswapRoutes[usdt][usdc] = [usdt, weth, usdc];\r\n\r\n    // pancakeswapRoutes[wbtc][usdc] = [wbtc, weth, usdc];\r\n    // pancakeswapRoutes[renBTC][usdc] = [renBTC, weth, usdc];\r\n    // pancakeswapRoutes[sushi][usdc] = [sushi, weth, usdc];\r\n    // pancakeswapRoutes[dego][usdc] = [dego, weth, usdc];\r\n    // pancakeswapRoutes[crv][usdc] = [crv, weth, usdc];\r\n    // pancakeswapRoutes[comp][usdc] = [comp, weth, usdc];\r\n  }\r\n\r\n  /*\r\n  *   Set the pool that will receive the reward token\r\n  *   based on the address of the reward Token\r\n  */\r\n  function setTokenPool(address _pool) public onlyGovernance {\r\n    require(wbnb == IRewardPool(_pool).rewardToken(), \"Rewardpool's token is not WBNB\");\r\n    profitSharingPool = _pool;\r\n    targetToken = wbnb;\r\n    emit TokenPoolSet(targetToken, _pool);\r\n  }\r\n\r\n  /**\r\n  * Sets the path for swapping tokens to the to address\r\n  * The to address is not validated to match the targetToken,\r\n  * so that we could first update the paths, and then,\r\n  * set the new target\r\n  */\r\n  function setConversionPath(address from, address to, address[] memory _pancakeswapRoute)\r\n    public \r\n    onlyGovernance \r\n  {\r\n    require(\r\n      from == _pancakeswapRoute[0],\r\n      \"The first token of the Pancakeswap route must be the from token\"\r\n    );\r\n    require(\r\n      to == _pancakeswapRoute[_pancakeswapRoute.length - 1],\r\n      \"The last token of the Pancakeswap route must be the to token\"\r\n    );\r\n    \r\n    pancakeswapRoutes[from][to] = _pancakeswapRoute;\r\n  }\r\n\r\n  // Transfers the funds from the msg.sender to the pool\r\n  // under normal circumstances, msg.sender is the strategy\r\n  function poolNotifyFixedTarget(address _token, uint256 _amount) external {\r\n    uint256 remainingAmount = _amount;\r\n    // Note: targetToken could only be FARM or NULL. \r\n    // it is only used to check that the rewardPool is set.\r\n    if (targetToken == address(0)) {\r\n      return; // a No-op if target pool is not set yet\r\n    }\r\n\r\n    if (_token == wbnb) {\r\n      // this is already the right token\r\n      // Note: Under current structure, this would be FARM.\r\n      // This would pass on the grain buy back as it would be the special case\r\n      // designed for NotifyHelper calls\r\n      // This is assuming that NO strategy would notify profits in FARM\r\n\r\n      // IBEP20(_token).safeTransferFrom(msg.sender, profitSharingPool, _amount);\r\n      // IRewardPool(profitSharingPool).notifyRewardAmount(_amount);\r\n\r\n      // send the _amount of wbnb to the cross-chain converter\r\n    } else {\r\n\r\n      // we need to convert _token to FARM\r\n      if (pancakeswapRoutes[_token][farm].length > 1) {\r\n        IBEP20(_token).safeTransferFrom(msg.sender, address(this), remainingAmount);\r\n        uint256 balanceToSwap = IBEP20(_token).balanceOf(address(this));\r\n        liquidate(_token, wbnb, balanceToSwap);\r\n\r\n        // now we can send this token forward\r\n        uint256 convertedRewardAmount = IBEP20(wbnb).balanceOf(address(this));\r\n        \r\n        // IBEP20(farm).safeTransfer(profitSharingPool, convertedRewardAmount);\r\n        // IRewardPool(profitSharingPool).notifyRewardAmount(convertedRewardAmount);\r\n\r\n        // send the token to the cross-chain converter address\r\n      } else { \r\n        // else the route does not exist for this token\r\n        // do not take any fees and revert. \r\n        // It's better to set the liquidation path then perform it again, \r\n        // rather then leaving the funds in controller\r\n        revert(\"FeeRewardForwarder: liquidation path doesn't exist\"); \r\n      }\r\n    }\r\n  }\r\n\r\n  function liquidate(address _from, address _to, uint256 balanceToSwap) internal {\r\n    if(balanceToSwap > 0){\r\n      IBEP20(_from).safeApprove(pancakeswapRouterV2, 0);\r\n      IBEP20(_from).safeApprove(pancakeswapRouterV2, balanceToSwap);\r\n\r\n      IUniswapV2Router02(pancakeswapRouterV2).swapExactTokensForTokens(\r\n        balanceToSwap,\r\n        0,\r\n        pancakeswapRoutes[_from][_to],\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/hardworkInterface/IRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// Unifying the interface with the Synthetix Reward Pool \r\ninterface IRewardPool {\r\n  function rewardToken() external view returns (address);\r\n  function lpToken() external view returns (address);\r\n  function duration() external view returns (uint256);\r\n\r\n  function periodFinish() external view returns (uint256);\r\n  function rewardRate() external view returns (uint256);\r\n  function rewardPerTokenStored() external view returns (uint256);\r\n\r\n  function stake(uint256 amountWei) external;\r\n\r\n  // `balanceOf` would give the amount staked. \r\n  // As this is 1 to 1, this is also the holder's share\r\n  function balanceOf(address holder) external view returns (uint256);\r\n  // total shares & total lpTokens staked\r\n  function totalSupply() external view returns(uint256);\r\n\r\n  function withdraw(uint256 amountWei) external;\r\n  function exit() external;\r\n\r\n  // get claimed rewards\r\n  function earned(address holder) external view returns (uint256);\r\n\r\n  // claim rewards\r\n  function getReward() external;\r\n\r\n  // notify\r\n  function notifyRewardAmount(uint256 _amount) external;\r\n}\r\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/token/BEP20/BEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\nimport '../../access/Ownable.sol';\nimport '../../GSN/Context.sol';\nimport './IBEP20.sol';\nimport '../../math/SafeMath.sol';\nimport '../../utils/Address.sol';\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() public override view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() public override view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() public override view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public override view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n     * the total supply.\n     *\n     * Requirements\n     *\n     * - `msg.sender` must be the token owner\n     */\n    function mint(uint256 amount) public onlyOwner returns (bool) {\n        _mint(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), 'BEP20: transfer from the zero address');\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\n\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), 'BEP20: mint to the zero address');\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), 'BEP20: burn from the zero address');\n\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), 'BEP20: approve from the zero address');\n        require(spender != address(0), 'BEP20: approve to the zero address');\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\n        );\n    }\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.4.0;\n\nimport '../GSN/Context.sol';\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@pancakeswap/pancake-swap-lib/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.4.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/lib/@harvest-finance/strategies/RewardTokenProfitNotifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {SafeMath} from \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport {IBEP20} from \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport {SafeBEP20} from \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\nimport {IController} from \"../hardworkInterface/IController.sol\";\r\nimport {Controllable} from \"../Controllable.sol\";\r\n\r\ncontract RewardTokenProfitNotifier is Controllable {\r\n  using SafeMath for uint256;\r\n  using SafeBEP20 for IBEP20;\r\n\r\n  uint256 public profitSharingNumerator;\r\n  uint256 public profitSharingDenominator;\r\n  address public rewardToken;\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _rewardToken\r\n  ) public Controllable(_storage){\r\n    rewardToken = _rewardToken;\r\n    // persist in the state for immutability of the fee\r\n    profitSharingNumerator = 30; //IController(controller()).profitSharingNumerator();\r\n    profitSharingDenominator = 100; //IController(controller()).profitSharingDenominator();\r\n    require(profitSharingNumerator < profitSharingDenominator, \"invalid profit share\");\r\n  }\r\n\r\n  event ProfitLogInReward(uint256 profitAmount, uint256 feeAmount, uint256 timestamp);\r\n\r\n  function notifyProfitInRewardToken(uint256 _rewardBalance) internal {\r\n    if( _rewardBalance > 0 ){\r\n      uint256 feeAmount = _rewardBalance.mul(profitSharingNumerator).div(profitSharingDenominator);\r\n      emit ProfitLogInReward(_rewardBalance, feeAmount, block.timestamp);\r\n      IBEP20(rewardToken).safeApprove(controller(), 0);\r\n      IBEP20(rewardToken).safeApprove(controller(), feeAmount);\r\n      \r\n      IController(controller()).notifyFee(\r\n        rewardToken,\r\n        feeAmount\r\n      );\r\n    } else {\r\n      emit ProfitLogInReward(0, 0, block.timestamp);\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/strategies/ProfitNotifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\nimport \"../hardworkInterface/IController.sol\";\r\nimport \"../Controllable.sol\";\r\n\r\ncontract ProfitNotifier is Controllable {\r\n  using SafeMath for uint256;\r\n  using SafeBEP20 for IBEP20;\r\n\r\n  uint256 public profitSharingNumerator;\r\n  uint256 public profitSharingDenominator;\r\n  address public underlying;\r\n\r\n  event ProfitLog(\r\n    uint256 oldBalance,\r\n    uint256 newBalance,\r\n    uint256 feeAmount,\r\n    uint256 timestamp\r\n  );\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _underlying\r\n  ) public Controllable(_storage){\r\n    underlying = _underlying;\r\n    // persist in the state for immutability of the fee\r\n    profitSharingNumerator = 30; //IController(controller()).profitSharingNumerator();\r\n    profitSharingDenominator = 100; //IController(controller()).profitSharingDenominator();\r\n    require(profitSharingNumerator < profitSharingDenominator, \"invalid profit share\");\r\n  }\r\n\r\n  function notifyProfit(uint256 oldBalance, uint256 newBalance) internal {\r\n    if (newBalance > oldBalance) {\r\n      uint256 profit = newBalance.sub(oldBalance);\r\n      uint256 feeAmount = profit.mul(profitSharingNumerator).div(profitSharingDenominator);\r\n      emit ProfitLog(oldBalance, newBalance, feeAmount, block.timestamp);\r\n\r\n      IBEP20(underlying).safeApprove(controller(), 0);\r\n      IBEP20(underlying).safeApprove(controller(), feeAmount);\r\n      IController(controller()).notifyFee(\r\n        underlying,\r\n        feeAmount\r\n      );\r\n    } else {\r\n      emit ProfitLog(oldBalance, newBalance, 0, block.timestamp);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/HardRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport {SafeMath} from \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport {IBEP20} from \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport {SafeBEP20} from \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\nimport {Governable} from \"./Governable.sol\";\r\nimport {Controllable} from \"./Controllable.sol\";\r\n\r\ncontract HardRewards is Controllable {\r\n\r\n  using SafeMath for uint256;\r\n  using SafeBEP20 for IBEP20;\r\n\r\n  event Rewarded(address indexed recipient, address indexed vault, uint256 amount);\r\n\r\n  // token used for rewards\r\n  IBEP20 public token;\r\n\r\n  // how many tokens per each block\r\n  uint256 public blockReward;\r\n\r\n  // vault to the last rewarded block\r\n  mapping(address => uint256) public lastReward;\r\n\r\n  constructor(address _storage, address _token)\r\n  Controllable(_storage) public {\r\n    token = IBEP20(_token);\r\n  }\r\n\r\n  /**\r\n  * Called from the controller after hard work has been done. Defensively avoid\r\n  * reverting the transaction in this function.\r\n  */\r\n  function rewardMe(address recipient, address vault) external onlyController {\r\n    if (address(token) == address(0) || blockReward == 0) {\r\n      // no rewards now\r\n      emit Rewarded(recipient, vault, 0);\r\n      return;\r\n    }\r\n\r\n    if (lastReward[vault] == 0) {\r\n      // vault does not exist\r\n      emit Rewarded(recipient, vault, 0);\r\n      return;\r\n    }\r\n\r\n    uint256 span = block.number.sub(lastReward[vault]);\r\n    uint256 reward = blockReward.mul(span);\r\n\r\n    if (reward > 0) {\r\n      uint256 balance = token.balanceOf(address(this));\r\n      uint256 realReward = balance >= reward ? reward : balance;\r\n      if (realReward > 0) {\r\n        token.safeTransfer(recipient, realReward);\r\n      }\r\n      emit Rewarded(recipient, vault, realReward);\r\n    } else {\r\n      emit Rewarded(recipient, vault, 0);\r\n    }\r\n    lastReward[vault] = block.number;\r\n  }\r\n\r\n  function addVault(address _vault) external onlyGovernance {\r\n    lastReward[_vault] = block.number;\r\n  }\r\n\r\n  function removeVault(address _vault) external onlyGovernance {\r\n    delete (lastReward[_vault]);\r\n  }\r\n\r\n  /**\r\n  * Transfers tokens for the new rewards cycle. Allows for changing the rewards setting\r\n  * at the same time.\r\n  */\r\n  function load(address _token, uint256 _rate, uint256 _amount) external onlyGovernance {\r\n    token = IBEP20(_token);\r\n    blockReward = _rate;\r\n    if (address(token) != address(0) && _amount > 0) {\r\n      token.safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/lib/@harvest-finance/Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\";\r\nimport \"./hardworkInterface/IController.sol\";\r\nimport \"./hardworkInterface/IStrategy.sol\";\r\nimport \"./hardworkInterface/IVault.sol\";\r\nimport \"./FeeRewardForwarder.sol\";\r\nimport \"./Governable.sol\";\r\nimport \"./HardRewards.sol\";\r\n\r\ncontract Controller is IController, Governable {\r\n\r\n    using SafeBEP20 for IBEP20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // external parties\r\n    address public feeRewardForwarder;\r\n\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    mapping (address => bool) public override greyList;\r\n\r\n    // All vaults that we have\r\n    mapping (address => bool) public vaults;\r\n\r\n    // Rewards for hard work. Nullable.\r\n    HardRewards public hardRewards;\r\n\r\n    uint256 public constant override profitSharingNumerator = 5;\r\n    uint256 public constant override profitSharingDenominator = 100;\r\n\r\n    event SharePriceChangeLog(\r\n      address indexed vault,\r\n      address indexed strategy,\r\n      uint256 oldSharePrice,\r\n      uint256 newSharePrice,\r\n      uint256 timestamp\r\n    );\r\n\r\n    modifier validVault(address _vault){\r\n        require(vaults[_vault], \"vault does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier confirmSharePrice(\r\n        address vault,\r\n        uint256 hint,\r\n        uint256 deviationNumerator,\r\n        uint256 deviationDenominator\r\n    ) {\r\n        uint256 sharePrice = IVault(vault).getPricePerFullShare();\r\n        uint256 resolution = 1e18;\r\n        if (sharePrice > hint) {\r\n            require(\r\n                sharePrice.mul(resolution).div(hint) <= deviationNumerator.mul(resolution).div(deviationDenominator),\r\n                \"share price deviation\"\r\n            );\r\n        } else {\r\n            require(\r\n                hint.mul(resolution).div(sharePrice) <= deviationNumerator.mul(resolution).div(deviationDenominator),\r\n                \"share price deviation\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    mapping (address => bool) public hardWorkers;\r\n\r\n    modifier onlyHardWorkerOrGovernance() {\r\n        require(hardWorkers[msg.sender] || (msg.sender == governance()),\r\n        \"only hard worker can call this\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _storage, address _feeRewardForwarder)\r\n        Governable(_storage) \r\n        public \r\n    {\r\n        require(_feeRewardForwarder != address(0), \"feeRewardForwarder should not be empty\");\r\n        feeRewardForwarder = _feeRewardForwarder;\r\n    }\r\n\r\n    function addHardWorker(address _worker) public onlyGovernance {\r\n      require(_worker != address(0), \"_worker must be defined\");\r\n      hardWorkers[_worker] = true;\r\n    }\r\n\r\n    function removeHardWorker(address _worker) public onlyGovernance {\r\n      require(_worker != address(0), \"_worker must be defined\");\r\n      hardWorkers[_worker] = false;\r\n    }\r\n\r\n    function hasVault(address _vault) external override returns (bool) {\r\n      return vaults[_vault];\r\n    }\r\n\r\n    // Only smart contracts will be affected by the greyList.\r\n    function addToGreyList(address _target) public onlyGovernance {\r\n        greyList[_target] = true;\r\n    }\r\n\r\n    function removeFromGreyList(address _target) public onlyGovernance {\r\n        greyList[_target] = false;\r\n    }\r\n\r\n    function setFeeRewardForwarder(address _feeRewardForwarder) public onlyGovernance {\r\n      require(_feeRewardForwarder != address(0), \"new reward forwarder should not be empty\");\r\n      feeRewardForwarder = _feeRewardForwarder;\r\n    }\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external override onlyGovernance {\r\n        require(_vault != address(0), \"new vault shouldn't be empty\");\r\n        require(!vaults[_vault], \"vault already exists\");\r\n        require(_strategy != address(0), \"new strategy shouldn't be empty\");\r\n\r\n        vaults[_vault] = true;\r\n        // no need to protect against sandwich, because there will be no call to withdrawAll\r\n        // as the vault and strategy is brand new\r\n        IVault(_vault).setStrategy(_strategy);\r\n    }\r\n\r\n    function getPricePerFullShare(address _vault) public view returns(uint256) {\r\n        return IVault(_vault).getPricePerFullShare();\r\n    }\r\n\r\n    function doHardWork(\r\n        address _vault,\r\n        uint256 hint,\r\n        uint256 deviationNumerator,\r\n        uint256 deviationDenominator\r\n    ) \r\n        external \r\n        override\r\n        confirmSharePrice(_vault, hint, deviationNumerator, deviationDenominator)\r\n        onlyHardWorkerOrGovernance\r\n        validVault(_vault) \r\n    {\r\n        uint256 oldSharePrice = IVault(_vault).getPricePerFullShare();\r\n        IVault(_vault).doHardWork();\r\n        if (address(hardRewards) != address(0)) {\r\n            // rewards are an option now\r\n            hardRewards.rewardMe(msg.sender, _vault);\r\n        }\r\n        emit SharePriceChangeLog(\r\n          _vault,\r\n          IVault(_vault).strategy(),\r\n          oldSharePrice,\r\n          IVault(_vault).getPricePerFullShare(),\r\n          block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawAll(\r\n        address _vault,\r\n        uint256 hint,\r\n        uint256 deviationNumerator,\r\n        uint256 deviationDenominator\r\n    ) \r\n        external\r\n        confirmSharePrice(_vault, hint, deviationNumerator, deviationDenominator)\r\n        onlyGovernance\r\n        validVault(_vault)\r\n    {\r\n        IVault(_vault).withdrawAll();\r\n    }\r\n\r\n    function setStrategy(\r\n        address _vault,\r\n        address strategy,\r\n        uint256 hint,\r\n        uint256 deviationNumerator,\r\n        uint256 deviationDenominator\r\n    ) \r\n        external\r\n        confirmSharePrice(_vault, hint, deviationNumerator, deviationDenominator)\r\n        onlyGovernance\r\n        validVault(_vault)\r\n    {\r\n        IVault(_vault).setStrategy(strategy);\r\n    }\r\n\r\n    function setHardRewards(address _hardRewards) external onlyGovernance {\r\n        hardRewards = HardRewards(_hardRewards);\r\n    }\r\n\r\n    // transfers token in the controller contract to the governance\r\n    function salvage(address _token, uint256 _amount) external override onlyGovernance {\r\n        IBEP20(_token).safeTransfer(governance(), _amount);\r\n    }\r\n\r\n    function salvageStrategy(address _strategy, address _token, uint256 _amount) external override onlyGovernance {\r\n        // the strategy is responsible for maintaining the list of\r\n        // salvagable tokens, to make sure that governance cannot come\r\n        // in and take away the coins\r\n        IStrategy(_strategy).salvage(governance(), _token, _amount);\r\n    }\r\n\r\n    function notifyFee(address underlying, uint256 fee) external override {\r\n      if (fee > 0) {\r\n        IBEP20(underlying).safeTransferFrom(msg.sender, address(this), fee);\r\n        IBEP20(underlying).safeApprove(feeRewardForwarder, 0);\r\n        IBEP20(underlying).safeApprove(feeRewardForwarder, fee);\r\n        FeeRewardForwarder(feeRewardForwarder).poolNotifyFixedTarget(underlying, fee);\r\n      }\r\n    }\r\n}\r\n"
    },
    "contracts/RewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/BEP20.sol\";\r\n\r\n// Mock Reward Token - Testing Only\r\ncontract RewardToken is BEP20(\"FARM Reward Token\", \"bFARM\") {\r\n\r\n  function faucet(uint256 amount) external {\r\n    _mint(msg.sender, amount);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/venus-protocol/VenusProtocolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"../../lib/@harvest-finance/hardworkInterface/IStrategyV2.sol\";\r\n\r\ncontract VenusProtocolStrategy {\r\n\r\n}"
    },
    "contracts/lib/@harvest-finance/strategies/upgradability/StrategyProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"../../hardworkInterface/IUpgradeSource.sol\";\r\n// import \"@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol\";\r\n\r\ncontract StrategyProxy {\r\n  // constructor(address _implementation) public {\r\n  //   _setImplementation(_implementation);\r\n  // }\r\n\r\n  /**\r\n  * The main logic. If the timer has elapsed and there is a schedule upgrade,\r\n  * the governance can upgrade the strategy\r\n  */\r\n  function upgrade() external {\r\n    (bool should, address newImplementation) = IUpgradeSource(address(this)).shouldUpgrade();\r\n    require(should, \"Upgrade not scheduled\");\r\n    // _upgradeTo(newImplementation);\r\n\r\n    // the finalization needs to be executed on itself to update the storage of this proxy\r\n    // it also needs to be invoked by the governance, not by address(this), so delegatecall is needed\r\n    (bool success, bytes memory result) = address(this).delegatecall(\r\n      abi.encodeWithSignature(\"finalizeUpgrade()\")\r\n    );\r\n\r\n    require(success, \"Issue when finalizing the upgrade\");\r\n  }\r\n\r\n  // function implementation() external view returns (address) {\r\n  //   return _implementation();\r\n  // }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}