{
  "address": "0x399C85c91Ad7Cdea4B9f8bd435EC2e1d03888801",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRewardForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SharePriceChangeLog",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worker",
          "type": "address"
        }
      ],
      "name": "addHardWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "addToGreyList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "addVaultAndStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "hint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationDenominator",
          "type": "uint256"
        }
      ],
      "name": "doHardWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRewardForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "greyList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardRewards",
      "outputs": [
        {
          "internalType": "contract HardRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hardWorkers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "hasVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "notifyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitSharingDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitSharingNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "removeFromGreyList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worker",
          "type": "address"
        }
      ],
      "name": "removeHardWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "salvage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "salvageStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRewardForwarder",
          "type": "address"
        }
      ],
      "name": "setFeeRewardForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hardRewards",
          "type": "address"
        }
      ],
      "name": "setHardRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_store",
          "type": "address"
        }
      ],
      "name": "setStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "hint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationDenominator",
          "type": "uint256"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "store",
      "outputs": [
        {
          "internalType": "contract Storage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "hint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deviationDenominator",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89058c2a390eee213944e532c358f9c8da58c67cdbcc344182bc77471661841d",
  "receipt": {
    "to": null,
    "from": "0x0420E8f074D935Da1D19C3f03d1AF626a16A0420",
    "contractAddress": "0x399C85c91Ad7Cdea4B9f8bd435EC2e1d03888801",
    "transactionIndex": 0,
    "gasUsed": "2076800",
    "logsBloom": "0x
    "blockHash": "0x09d98bcf6188a1a10ef8842adb41d27372720f43fb5280604c23392e0df2a85f",
    "transactionHash": "0x89058c2a390eee213944e532c358f9c8da58c67cdbcc344182bc77471661841d",
    "logs": [],
    "blockNumber": 6705089,
    "cumulativeGasUsed": "2076800",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xff3b7e5Ff30fCd84CC2351f56F3e20397e54E52D",
    "0x314D178737D8F63a53f362a2145BBC2272537A02"
  ],
  "solcInputHash": "d10d7761ca3e74948997df5534ad1e07",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRewardForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SharePriceChangeLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addToGreyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addVaultAndStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationDenominator\",\"type\":\"uint256\"}],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRewardForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardRewards\",\"outputs\":[{\"internalType\":\"contract HardRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hardWorkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"hasVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"notifyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeFromGreyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRewardForwarder\",\"type\":\"address\"}],\"name\":\"setFeeRewardForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hardRewards\",\"type\":\"address\"}],\"name\":\"setHardRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationDenominator\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationDenominator\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/@harvest-finance/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4b1686c1494213666dc1423cea64333c3063f334327216d69ca3d59f75a2517\",\"license\":\"MIT\"},\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xcca9eeefad9d3c8a68e426833a5c790d055beebc3f1cefbeac20b096456c9aef\",\"license\":\"GPL-3.0-or-later\"},\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport './IBEP20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeBEP20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf7a7cce5c7e15107bdb2c074331471d301e2766dac8942cf92f0298df7cd0b3\",\"license\":\"MIT\"},\"@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x806c8686fdf1afac78d0828ca7941e5ac30282a358d23cf502ec39893c64d4af\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/lib/@harvest-finance/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport {Governable} from \\\"./Governable.sol\\\";\\r\\n\\r\\ncontract Controllable is Governable {\\r\\n\\r\\n  constructor(address _storage) Governable(_storage) public {\\r\\n  }\\r\\n\\r\\n  modifier onlyController() {\\r\\n    require(store.isController(msg.sender), \\\"Not a controller\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyControllerOrGovernance(){\\r\\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\\r\\n      \\\"The caller must be controller or governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function controller() public view returns (address) {\\r\\n    return store.controller();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x35284a8dfacfd613240a9c0c8bf4a7fe4736f5a7903feba5f75883a2d4e5fe21\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\r\\nimport \\\"./hardworkInterface/IController.sol\\\";\\r\\nimport \\\"./hardworkInterface/IStrategy.sol\\\";\\r\\nimport \\\"./hardworkInterface/IVault.sol\\\";\\r\\nimport \\\"./FeeRewardForwarder.sol\\\";\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./HardRewards.sol\\\";\\r\\n\\r\\ncontract Controller is IController, Governable {\\r\\n\\r\\n    using SafeBEP20 for IBEP20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // external parties\\r\\n    address public feeRewardForwarder;\\r\\n\\r\\n    // [Grey list]\\r\\n    // An EOA can safely interact with the system no matter what.\\r\\n    // If you're using Metamask, you're using an EOA.\\r\\n    // Only smart contracts may be affected by this grey list.\\r\\n    //\\r\\n    // This contract will not be able to ban any EOA from the system\\r\\n    // even if an EOA is being added to the greyList, he/she will still be able\\r\\n    // to interact with the whole system as if nothing happened.\\r\\n    // Only smart contracts will be affected by being added to the greyList.\\r\\n    mapping (address => bool) public override greyList;\\r\\n\\r\\n    // All vaults that we have\\r\\n    mapping (address => bool) public vaults;\\r\\n\\r\\n    // Rewards for hard work. Nullable.\\r\\n    HardRewards public hardRewards;\\r\\n\\r\\n    uint256 public constant override profitSharingNumerator = 5;\\r\\n    uint256 public constant override profitSharingDenominator = 100;\\r\\n\\r\\n    event SharePriceChangeLog(\\r\\n      address indexed vault,\\r\\n      address indexed strategy,\\r\\n      uint256 oldSharePrice,\\r\\n      uint256 newSharePrice,\\r\\n      uint256 timestamp\\r\\n    );\\r\\n\\r\\n    modifier validVault(address _vault){\\r\\n        require(vaults[_vault], \\\"vault does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier confirmSharePrice(\\r\\n        address vault,\\r\\n        uint256 hint,\\r\\n        uint256 deviationNumerator,\\r\\n        uint256 deviationDenominator\\r\\n    ) {\\r\\n        uint256 sharePrice = IVault(vault).getPricePerFullShare();\\r\\n        uint256 resolution = 1e18;\\r\\n        if (sharePrice > hint) {\\r\\n            require(\\r\\n                sharePrice.mul(resolution).div(hint) <= deviationNumerator.mul(resolution).div(deviationDenominator),\\r\\n                \\\"share price deviation\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                hint.mul(resolution).div(sharePrice) <= deviationNumerator.mul(resolution).div(deviationDenominator),\\r\\n                \\\"share price deviation\\\"\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping (address => bool) public hardWorkers;\\r\\n\\r\\n    modifier onlyHardWorkerOrGovernance() {\\r\\n        require(hardWorkers[msg.sender] || (msg.sender == governance()),\\r\\n        \\\"only hard worker can call this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _storage, address _feeRewardForwarder)\\r\\n        Governable(_storage) \\r\\n        public \\r\\n    {\\r\\n        require(_feeRewardForwarder != address(0), \\\"feeRewardForwarder should not be empty\\\");\\r\\n        feeRewardForwarder = _feeRewardForwarder;\\r\\n    }\\r\\n\\r\\n    function addHardWorker(address _worker) public onlyGovernance {\\r\\n      require(_worker != address(0), \\\"_worker must be defined\\\");\\r\\n      hardWorkers[_worker] = true;\\r\\n    }\\r\\n\\r\\n    function removeHardWorker(address _worker) public onlyGovernance {\\r\\n      require(_worker != address(0), \\\"_worker must be defined\\\");\\r\\n      hardWorkers[_worker] = false;\\r\\n    }\\r\\n\\r\\n    function hasVault(address _vault) external override returns (bool) {\\r\\n      return vaults[_vault];\\r\\n    }\\r\\n\\r\\n    // Only smart contracts will be affected by the greyList.\\r\\n    function addToGreyList(address _target) public onlyGovernance {\\r\\n        greyList[_target] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromGreyList(address _target) public onlyGovernance {\\r\\n        greyList[_target] = false;\\r\\n    }\\r\\n\\r\\n    function setFeeRewardForwarder(address _feeRewardForwarder) public onlyGovernance {\\r\\n      require(_feeRewardForwarder != address(0), \\\"new reward forwarder should not be empty\\\");\\r\\n      feeRewardForwarder = _feeRewardForwarder;\\r\\n    }\\r\\n\\r\\n    function addVaultAndStrategy(address _vault, address _strategy) external override onlyGovernance {\\r\\n        require(_vault != address(0), \\\"new vault shouldn't be empty\\\");\\r\\n        require(!vaults[_vault], \\\"vault already exists\\\");\\r\\n        require(_strategy != address(0), \\\"new strategy shouldn't be empty\\\");\\r\\n\\r\\n        vaults[_vault] = true;\\r\\n        // no need to protect against sandwich, because there will be no call to withdrawAll\\r\\n        // as the vault and strategy is brand new\\r\\n        IVault(_vault).setStrategy(_strategy);\\r\\n    }\\r\\n\\r\\n    function getPricePerFullShare(address _vault) public view returns(uint256) {\\r\\n        return IVault(_vault).getPricePerFullShare();\\r\\n    }\\r\\n\\r\\n    function doHardWork(\\r\\n        address _vault,\\r\\n        uint256 hint,\\r\\n        uint256 deviationNumerator,\\r\\n        uint256 deviationDenominator\\r\\n    ) \\r\\n        external \\r\\n        override\\r\\n        confirmSharePrice(_vault, hint, deviationNumerator, deviationDenominator)\\r\\n        onlyHardWorkerOrGovernance\\r\\n        validVault(_vault) \\r\\n    {\\r\\n        uint256 oldSharePrice = IVault(_vault).getPricePerFullShare();\\r\\n        IVault(_vault).doHardWork();\\r\\n        if (address(hardRewards) != address(0)) {\\r\\n            // rewards are an option now\\r\\n            hardRewards.rewardMe(msg.sender, _vault);\\r\\n        }\\r\\n        emit SharePriceChangeLog(\\r\\n          _vault,\\r\\n          IVault(_vault).strategy(),\\r\\n          oldSharePrice,\\r\\n          IVault(_vault).getPricePerFullShare(),\\r\\n          block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAll(\\r\\n        address _vault,\\r\\n        uint256 hint,\\r\\n        uint256 deviationNumerator,\\r\\n        uint256 deviationDenominator\\r\\n    ) \\r\\n        external\\r\\n        confirmSharePrice(_vault, hint, deviationNumerator, deviationDenominator)\\r\\n        onlyGovernance\\r\\n        validVault(_vault)\\r\\n    {\\r\\n        IVault(_vault).withdrawAll();\\r\\n    }\\r\\n\\r\\n    function setStrategy(\\r\\n        address _vault,\\r\\n        address strategy,\\r\\n        uint256 hint,\\r\\n        uint256 deviationNumerator,\\r\\n        uint256 deviationDenominator\\r\\n    ) \\r\\n        external\\r\\n        confirmSharePrice(_vault, hint, deviationNumerator, deviationDenominator)\\r\\n        onlyGovernance\\r\\n        validVault(_vault)\\r\\n    {\\r\\n        IVault(_vault).setStrategy(strategy);\\r\\n    }\\r\\n\\r\\n    function setHardRewards(address _hardRewards) external onlyGovernance {\\r\\n        hardRewards = HardRewards(_hardRewards);\\r\\n    }\\r\\n\\r\\n    // transfers token in the controller contract to the governance\\r\\n    function salvage(address _token, uint256 _amount) external override onlyGovernance {\\r\\n        IBEP20(_token).safeTransfer(governance(), _amount);\\r\\n    }\\r\\n\\r\\n    function salvageStrategy(address _strategy, address _token, uint256 _amount) external override onlyGovernance {\\r\\n        // the strategy is responsible for maintaining the list of\\r\\n        // salvagable tokens, to make sure that governance cannot come\\r\\n        // in and take away the coins\\r\\n        IStrategy(_strategy).salvage(governance(), _token, _amount);\\r\\n    }\\r\\n\\r\\n    function notifyFee(address underlying, uint256 fee) external override {\\r\\n      if (fee > 0) {\\r\\n        IBEP20(underlying).safeTransferFrom(msg.sender, address(this), fee);\\r\\n        IBEP20(underlying).safeApprove(feeRewardForwarder, 0);\\r\\n        IBEP20(underlying).safeApprove(feeRewardForwarder, fee);\\r\\n        FeeRewardForwarder(feeRewardForwarder).poolNotifyFixedTarget(underlying, fee);\\r\\n      }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x287b264620ae409e00108726c4a6bfdd7db37d326989ca863cc1cf55f62c13b8\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/FeeRewardForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./hardworkInterface/IRewardPool.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n\\r\\n// FeeRewardForwarder with no grain config\\r\\ncontract FeeRewardForwarder is Governable {\\r\\n  using SafeBEP20 for IBEP20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  address public farm;\\r\\n\\r\\n  // stables\\r\\n  address constant public usdt = address(0x55d398326f99059fF775485246999027B3197955);\\r\\n  address constant public vai = address(0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7);\\r\\n\\r\\n  // yield farming\\r\\n  address constant public cake = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\\r\\n  address constant public xvs = address(0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63);\\r\\n\\r\\n  // wbnb\\r\\n  address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\r\\n\\r\\n  mapping (address => mapping (address => address[])) public pancakeswapRoutes;\\r\\n  \\r\\n  // the targeted reward token to convert everything to\\r\\n  address public targetToken;\\r\\n  address public profitSharingPool;\\r\\n\\r\\n  address constant public pancakeswapRouterV2 = address(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\\r\\n\\r\\n  event TokenPoolSet(address token, address pool);\\r\\n\\r\\n  constructor(address _storage, address _farm) public Governable(_storage) {\\r\\n    require(_farm != address(0), \\\"_farm not defined\\\");\\r\\n    farm = _farm;\\r\\n\\r\\n    pancakeswapRoutes[cake][wbnb] = [cake, wbnb];\\r\\n    pancakeswapRoutes[xvs][wbnb] = [xvs, wbnb];\\r\\n    \\r\\n    // // Route to grain is always to farm then to grain.\\r\\n    // // So we will just use the existing route to buy FARM first\\r\\n    // // then sell partially to grain.\\r\\n    // pancakeswapRoutes[grain][farm] = [grain, farm];\\r\\n    // pancakeswapRoutes[farm][grain] = [farm, grain];\\r\\n\\r\\n    // // preset for grainBacker (usdc or weth)\\r\\n    // //weth\\r\\n    // pancakeswapRoutes[dai][weth] = [dai, weth];\\r\\n    // pancakeswapRoutes[usdc][weth] = [usdc, weth];\\r\\n    // pancakeswapRoutes[usdt][weth] = [usdt, weth];\\r\\n\\r\\n    // pancakeswapRoutes[wbtc][weth] = [wbtc, weth];\\r\\n    // pancakeswapRoutes[renBTC][weth] = [renBTC, weth];\\r\\n    // pancakeswapRoutes[sushi][weth] = [sushi, weth];\\r\\n    // pancakeswapRoutes[dego][weth] = [dego, weth];\\r\\n    // pancakeswapRoutes[crv][weth] = [crv, weth];\\r\\n    // pancakeswapRoutes[comp][weth] = [comp, weth];\\r\\n\\r\\n    // // usdc\\r\\n    // pancakeswapRoutes[weth][usdc] = [weth, usdc];\\r\\n    // pancakeswapRoutes[dai][usdc] = [dai, weth, usdc];\\r\\n    // pancakeswapRoutes[usdt][usdc] = [usdt, weth, usdc];\\r\\n\\r\\n    // pancakeswapRoutes[wbtc][usdc] = [wbtc, weth, usdc];\\r\\n    // pancakeswapRoutes[renBTC][usdc] = [renBTC, weth, usdc];\\r\\n    // pancakeswapRoutes[sushi][usdc] = [sushi, weth, usdc];\\r\\n    // pancakeswapRoutes[dego][usdc] = [dego, weth, usdc];\\r\\n    // pancakeswapRoutes[crv][usdc] = [crv, weth, usdc];\\r\\n    // pancakeswapRoutes[comp][usdc] = [comp, weth, usdc];\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  *   Set the pool that will receive the reward token\\r\\n  *   based on the address of the reward Token\\r\\n  */\\r\\n  function setTokenPool(address _pool) public onlyGovernance {\\r\\n    require(wbnb == IRewardPool(_pool).rewardToken(), \\\"Rewardpool's token is not WBNB\\\");\\r\\n    profitSharingPool = _pool;\\r\\n    targetToken = wbnb;\\r\\n    emit TokenPoolSet(targetToken, _pool);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Sets the path for swapping tokens to the to address\\r\\n  * The to address is not validated to match the targetToken,\\r\\n  * so that we could first update the paths, and then,\\r\\n  * set the new target\\r\\n  */\\r\\n  function setConversionPath(address from, address to, address[] memory _pancakeswapRoute)\\r\\n    public \\r\\n    onlyGovernance \\r\\n  {\\r\\n    require(\\r\\n      from == _pancakeswapRoute[0],\\r\\n      \\\"The first token of the Pancakeswap route must be the from token\\\"\\r\\n    );\\r\\n    require(\\r\\n      to == _pancakeswapRoute[_pancakeswapRoute.length - 1],\\r\\n      \\\"The last token of the Pancakeswap route must be the to token\\\"\\r\\n    );\\r\\n    \\r\\n    pancakeswapRoutes[from][to] = _pancakeswapRoute;\\r\\n  }\\r\\n\\r\\n  // Transfers the funds from the msg.sender to the pool\\r\\n  // under normal circumstances, msg.sender is the strategy\\r\\n  function poolNotifyFixedTarget(address _token, uint256 _amount) external {\\r\\n    uint256 remainingAmount = _amount;\\r\\n    // Note: targetToken could only be FARM or NULL. \\r\\n    // it is only used to check that the rewardPool is set.\\r\\n    if (targetToken == address(0)) {\\r\\n      return; // a No-op if target pool is not set yet\\r\\n    }\\r\\n\\r\\n    if (_token == wbnb) {\\r\\n      // this is already the right token\\r\\n      // Note: Under current structure, this would be FARM.\\r\\n      // This would pass on the grain buy back as it would be the special case\\r\\n      // designed for NotifyHelper calls\\r\\n      // This is assuming that NO strategy would notify profits in FARM\\r\\n\\r\\n      // IBEP20(_token).safeTransferFrom(msg.sender, profitSharingPool, _amount);\\r\\n      // IRewardPool(profitSharingPool).notifyRewardAmount(_amount);\\r\\n\\r\\n      // send the _amount of wbnb to the cross-chain converter\\r\\n    } else {\\r\\n\\r\\n      // we need to convert _token to FARM\\r\\n      if (pancakeswapRoutes[_token][farm].length > 1) {\\r\\n        IBEP20(_token).safeTransferFrom(msg.sender, address(this), remainingAmount);\\r\\n        uint256 balanceToSwap = IBEP20(_token).balanceOf(address(this));\\r\\n        liquidate(_token, wbnb, balanceToSwap);\\r\\n\\r\\n        // now we can send this token forward\\r\\n        uint256 convertedRewardAmount = IBEP20(wbnb).balanceOf(address(this));\\r\\n        \\r\\n        // IBEP20(farm).safeTransfer(profitSharingPool, convertedRewardAmount);\\r\\n        // IRewardPool(profitSharingPool).notifyRewardAmount(convertedRewardAmount);\\r\\n\\r\\n        // send the token to the cross-chain converter address\\r\\n      } else { \\r\\n        // else the route does not exist for this token\\r\\n        // do not take any fees and revert. \\r\\n        // It's better to set the liquidation path then perform it again, \\r\\n        // rather then leaving the funds in controller\\r\\n        revert(\\\"FeeRewardForwarder: liquidation path doesn't exist\\\"); \\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function liquidate(address _from, address _to, uint256 balanceToSwap) internal {\\r\\n    if(balanceToSwap > 0){\\r\\n      IBEP20(_from).safeApprove(pancakeswapRouterV2, 0);\\r\\n      IBEP20(_from).safeApprove(pancakeswapRouterV2, balanceToSwap);\\r\\n\\r\\n      IUniswapV2Router02(pancakeswapRouterV2).swapExactTokensForTokens(\\r\\n        balanceToSwap,\\r\\n        0,\\r\\n        pancakeswapRoutes[_from][_to],\\r\\n        address(this),\\r\\n        block.timestamp\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb91b79bac8b646b028fa6f1f2784e8879144bfbeb8e109d1e947e6977ff8367a\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport {Storage} from \\\"./Storage.sol\\\";\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  Storage public store;\\r\\n\\r\\n  constructor(address _store) public {\\r\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n    store = Storage(_store);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setStorage(address _store) public onlyGovernance {\\r\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n    store = Storage(_store);\\r\\n  }\\r\\n\\r\\n  function governance() public view returns (address) {\\r\\n    return store.governance();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x234fcc2a9615113afc1afaafc7dd084653ba041ec1c2b0b095c0682563b332c0\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/HardRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport {SafeMath} from \\\"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\\\";\\r\\nimport {IBEP20} from \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\r\\nimport {SafeBEP20} from \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\\\";\\r\\nimport {Governable} from \\\"./Governable.sol\\\";\\r\\nimport {Controllable} from \\\"./Controllable.sol\\\";\\r\\n\\r\\ncontract HardRewards is Controllable {\\r\\n\\r\\n  using SafeMath for uint256;\\r\\n  using SafeBEP20 for IBEP20;\\r\\n\\r\\n  event Rewarded(address indexed recipient, address indexed vault, uint256 amount);\\r\\n\\r\\n  // token used for rewards\\r\\n  IBEP20 public token;\\r\\n\\r\\n  // how many tokens per each block\\r\\n  uint256 public blockReward;\\r\\n\\r\\n  // vault to the last rewarded block\\r\\n  mapping(address => uint256) public lastReward;\\r\\n\\r\\n  constructor(address _storage, address _token)\\r\\n  Controllable(_storage) public {\\r\\n    token = IBEP20(_token);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Called from the controller after hard work has been done. Defensively avoid\\r\\n  * reverting the transaction in this function.\\r\\n  */\\r\\n  function rewardMe(address recipient, address vault) external onlyController {\\r\\n    if (address(token) == address(0) || blockReward == 0) {\\r\\n      // no rewards now\\r\\n      emit Rewarded(recipient, vault, 0);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    if (lastReward[vault] == 0) {\\r\\n      // vault does not exist\\r\\n      emit Rewarded(recipient, vault, 0);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 span = block.number.sub(lastReward[vault]);\\r\\n    uint256 reward = blockReward.mul(span);\\r\\n\\r\\n    if (reward > 0) {\\r\\n      uint256 balance = token.balanceOf(address(this));\\r\\n      uint256 realReward = balance >= reward ? reward : balance;\\r\\n      if (realReward > 0) {\\r\\n        token.safeTransfer(recipient, realReward);\\r\\n      }\\r\\n      emit Rewarded(recipient, vault, realReward);\\r\\n    } else {\\r\\n      emit Rewarded(recipient, vault, 0);\\r\\n    }\\r\\n    lastReward[vault] = block.number;\\r\\n  }\\r\\n\\r\\n  function addVault(address _vault) external onlyGovernance {\\r\\n    lastReward[_vault] = block.number;\\r\\n  }\\r\\n\\r\\n  function removeVault(address _vault) external onlyGovernance {\\r\\n    delete (lastReward[_vault]);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Transfers tokens for the new rewards cycle. Allows for changing the rewards setting\\r\\n  * at the same time.\\r\\n  */\\r\\n  function load(address _token, uint256 _rate, uint256 _amount) external onlyGovernance {\\r\\n    token = IBEP20(_token);\\r\\n    blockReward = _rate;\\r\\n    if (address(token) != address(0) && _amount > 0) {\\r\\n      token.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x088a21ad39a587dfdba0f3c0829b9c19a7f915c3f8d96cbfdf5ea80237ad7cca\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ncontract Storage {\\r\\n\\r\\n  address public governance;\\r\\n  address public controller;\\r\\n\\r\\n  constructor() public {\\r\\n    governance = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n  function setController(address _controller) public onlyGovernance {\\r\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\r\\n    controller = _controller;\\r\\n  }\\r\\n\\r\\n  function isGovernance(address account) public view returns (bool) {\\r\\n    return account == governance;\\r\\n  }\\r\\n\\r\\n  function isController(address account) public view returns (bool) {\\r\\n    return account == controller;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8142e3eefdcf3b008def0450a0129bf81744736e27b9dac7e8f08abdd9585b21\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/hardworkInterface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface IController {\\r\\n    // [Grey list]\\r\\n    // An EOA can safely interact with the system no matter what.\\r\\n    // If you're using Metamask, you're using an EOA.\\r\\n    // Only smart contracts may be affected by this grey list.\\r\\n    //\\r\\n    // This contract will not be able to ban any EOA from the system\\r\\n    // even if an EOA is being added to the greyList, he/she will still be able\\r\\n    // to interact with the whole system as if nothing happened.\\r\\n    // Only smart contracts will be affected by being added to the greyList.\\r\\n    // This grey list is only used in Vault.sol, see the code there for reference\\r\\n    function greyList(address _target) external view returns(bool);\\r\\n\\r\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\r\\n    function doHardWork(address _vault, uint256 hint, uint256 devianceNumerator, uint256 devianceDenominator) external;\\r\\n    function hasVault(address _vault) external returns(bool);\\r\\n\\r\\n    function salvage(address _token, uint256 amount) external;\\r\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\r\\n\\r\\n    function notifyFee(address _underlying, uint256 fee) external;\\r\\n    function profitSharingNumerator() external view returns (uint256);\\r\\n    function profitSharingDenominator() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8209d8f9db272580d3e854142602078e171438c7857f47a35f02de3c964541ba\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/hardworkInterface/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n// Unifying the interface with the Synthetix Reward Pool \\r\\ninterface IRewardPool {\\r\\n  function rewardToken() external view returns (address);\\r\\n  function lpToken() external view returns (address);\\r\\n  function duration() external view returns (uint256);\\r\\n\\r\\n  function periodFinish() external view returns (uint256);\\r\\n  function rewardRate() external view returns (uint256);\\r\\n  function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n  function stake(uint256 amountWei) external;\\r\\n\\r\\n  // `balanceOf` would give the amount staked. \\r\\n  // As this is 1 to 1, this is also the holder's share\\r\\n  function balanceOf(address holder) external view returns (uint256);\\r\\n  // total shares & total lpTokens staked\\r\\n  function totalSupply() external view returns(uint256);\\r\\n\\r\\n  function withdraw(uint256 amountWei) external;\\r\\n  function exit() external;\\r\\n\\r\\n  // get claimed rewards\\r\\n  function earned(address holder) external view returns (uint256);\\r\\n\\r\\n  // claim rewards\\r\\n  function getReward() external;\\r\\n\\r\\n  // notify\\r\\n  function notifyRewardAmount(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd03f67c385996f06887e3944f0239db3be655169df55a33c23695f3055221a04\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/hardworkInterface/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface IStrategy {\\r\\n    \\r\\n    function unsalvagableTokens(address tokens) external view returns (bool);\\r\\n    \\r\\n    function governance() external view returns (address);\\r\\n    function controller() external view returns (address);\\r\\n    function underlying() external view returns (address);\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function withdrawAllToVault() external;\\r\\n    function withdrawToVault(uint256 amount) external;\\r\\n\\r\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\r\\n\\r\\n    // should only be called by controller\\r\\n    function salvage(address recipient, address token, uint256 amount) external;\\r\\n\\r\\n    function doHardWork() external;\\r\\n    function depositArbCheck() external view returns(bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xbc773bfa033c84e010354953a600341dc641a0f6662a1c106d2f5e4498d6323a\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/hardworkInterface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    function underlyingBalanceInVault() external view returns (uint256);\\r\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n    // function store() external view returns (address);\\r\\n    // function governance() external view returns (address);\\r\\n    // function controller() external view returns (address);\\r\\n    function underlying() external view returns (address);\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function setStrategy(address _strategy) external;\\r\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n    function deposit(uint256 amountWei) external;\\r\\n    function depositFor(uint256 amountWei, address holder) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n    function withdraw(uint256 numberOfShares) external;\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\r\\n\\r\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\r\\n    function doHardWork() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc54aebdf9c1f10fb473852d532b96fef882392ec1c5b770606fee78d29c6a731\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516125073803806125078339818101604052604081101561003357600080fd5b508051602090910151816001600160a01b038116610098576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392831617905581166100f15760405162461bcd60e51b81526004018080602001828103825260268152602001806124e16026913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055506123c0806101216000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806358d94fbc116100de578063a622ee7c11610097578063b8393eaf11610071578063b8393eaf1461049a578063d0fc3e83146104c0578063ed32fa33146104c8578063f706bf28146104f657610173565b8063a622ee7c14610464578063ae28d1281461048a578063b60f151a1461049257610173565b806358d94fbc146103905780635aa6e675146103c65780636e4af83e146103ea57806381860170146104105780639137c1a714610436578063975057e71461045c57610173565b80633259eeb6116101305780633259eeb61461027857806338dd98761461029e57806338f5a5e4146102c45780633c53eddd146102ea5780633e3309cc1461032c57806340c0423e1461035857610173565b8063026a0dd0146101785780630d453efb1461019257806313a86924146101cc5780632da624a314610206578063301153f11461022c57806330e412ad14610252575b600080fd5b610180610522565b60408051918252519081900360200190f35b6101b8600480360360208110156101a857600080fd5b50356001600160a01b0316610527565b604080519115158252519081900360200190f35b610204600480360360808110156101e257600080fd5b506001600160a01b038135169060208101359060408101359060600135610545565b005b6101806004803603602081101561021c57600080fd5b50356001600160a01b03166109f6565b6102046004803603602081101561024257600080fd5b50356001600160a01b0316610a63565b6101b86004803603602081101561026857600080fd5b50356001600160a01b0316610b95565b6102046004803603602081101561028e57600080fd5b50356001600160a01b0316610baa565b610204600480360360208110156102b457600080fd5b50356001600160a01b0316610cd9565b610204600480360360208110156102da57600080fd5b50356001600160a01b0316610db4565b610204600480360360a081101561030057600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060800135610e91565b6102046004803603604081101561034257600080fd5b506001600160a01b038135169060200135611176565b6102046004803603608081101561036e57600080fd5b506001600160a01b03813516906020810135906040810135906060013561124f565b610204600480360360608110156103a657600080fd5b506001600160a01b0381358116916020810135909116906040013561151f565b6103ce611664565b604080516001600160a01b039092168252519081900360200190f35b6102046004803603602081101561040057600080fd5b50356001600160a01b03166116e4565b6102046004803603602081101561042657600080fd5b50356001600160a01b03166117be565b6102046004803603602081101561044c57600080fd5b50356001600160a01b03166118de565b6103ce611a14565b6101b86004803603602081101561047a57600080fd5b50356001600160a01b0316611a23565b6103ce611a38565b610180611a47565b6101b8600480360360208110156104b057600080fd5b50356001600160a01b0316611a4c565b6103ce611a61565b610204600480360360408110156104de57600080fd5b506001600160a01b0381358116916020013516611a70565b6102046004803603604081101561050c57600080fd5b506001600160a01b038135169060200135611cbe565b606481565b6001600160a01b031660009081526003602052604090205460ff1690565b838383836000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b50519050670de0b6b3a764000084821115610635576105d7836105d18684611d63565b90611dc5565b6105e5866105d18585611d63565b1115610630576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b61069c565b610643836105d18684611d63565b610651836105d18885611d63565b111561069c576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b3360009081526005602052604090205460ff16806106d257506106bd611664565b6001600160a01b0316336001600160a01b0316145b610723576040805162461bcd60e51b815260206004820152601e60248201527f6f6e6c79206861726420776f726b65722063616e2063616c6c20746869730000604482015290519081900360640190fd5b6001600160a01b038a166000908152600360205260409020548a9060ff16610789576040805162461bcd60e51b81526020600482015260146024820152731d985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b604482015290519081900360640190fd5b60008b6001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c457600080fd5b505afa1580156107d8573d6000803e3d6000fd5b505050506040513d60208110156107ee57600080fd5b5051604080516313e9761560e21b815290519192506001600160a01b038e1691634fa5d8549160048082019260009290919082900301818387803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b50506004546001600160a01b03161591506108ce90505760048054604080516333b54be160e01b815233938101939093526001600160a01b038f8116602485015290519116916333b54be191604480830192600092919082900301818387803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050505b8b6001600160a01b031663a8c62e766040518163ffffffff1660e01b815260040160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d602081101561093157600080fd5b505160408051631df1ee3f60e21b815290516001600160a01b03928316928f16917f43ffccb0abea5304f42c5d67d56e479f21f76ecc142c39a770725e99125243bc91859184916377c7b8fc91600480820192602092909190829003018186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d60208110156109c857600080fd5b50516040805192835260208301919091524282820152519081900360600190a3505050505050505050505050565b6000816001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3157600080fd5b505afa158015610a45573d6000803e3d6000fd5b505050506040513d6020811015610a5b57600080fd5b505192915050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d6020811015610ad857600080fd5b5051610b1c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610b71576040805162461bcd60e51b815260206004820152601760248201527617dddbdc9ad95c881b5d5cdd081899481919599a5b9959604a1b604482015290519081900360640190fd5b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b60026020526000908152604090205460ff1681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610bf557600080fd5b505afa158015610c09573d6000803e3d6000fd5b505050506040513d6020811015610c1f57600080fd5b5051610c63576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610cb8576040805162461bcd60e51b815260206004820152601760248201527617dddbdc9ad95c881b5d5cdd081899481919599a5b9959604a1b604482015290519081900360640190fd5b6001600160a01b03166000908152600560205260409020805460ff19169055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610d2457600080fd5b505afa158015610d38573d6000803e3d6000fd5b505050506040513d6020811015610d4e57600080fd5b5051610d92576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d6020811015610e2957600080fd5b5051610e6d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b848383836000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed057600080fd5b505afa158015610ee4573d6000803e3d6000fd5b505050506040513d6020811015610efa57600080fd5b50519050670de0b6b3a764000084821115610f7b57610f1d836105d18684611d63565b610f2b866105d18585611d63565b1115610f76576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b610fe2565b610f89836105d18684611d63565b610f97836105d18885611d63565b1115610fe2576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561102d57600080fd5b505afa158015611041573d6000803e3d6000fd5b505050506040513d602081101561105757600080fd5b505161109b576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038b166000908152600360205260409020548b9060ff16611101576040805162461bcd60e51b81526020600482015260146024820152731d985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b604482015290519081900360640190fd5b8b6001600160a01b03166333a100ca8c6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b50505050505050505050505050505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d60208110156111eb57600080fd5b505161122f576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b61124b61123a611664565b6001600160a01b0384169083611e07565b5050565b838383836000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d60208110156112b857600080fd5b50519050670de0b6b3a764000084821115611339576112db836105d18684611d63565b6112e9866105d18585611d63565b1115611334576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b6113a0565b611347836105d18684611d63565b611355836105d18885611d63565b11156113a0576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d602081101561141557600080fd5b5051611459576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038a166000908152600360205260409020548a9060ff166114bf576040805162461bcd60e51b81526020600482015260146024820152731d985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b604482015290519081900360640190fd5b8a6001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050505050505050505050505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561156a57600080fd5b505afa15801561157e573d6000803e3d6000fd5b505050506040513d602081101561159457600080fd5b50516115d8576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b826001600160a01b0316631113ef526115ef611664565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b357600080fd5b505afa1580156116c7573d6000803e3d6000fd5b505050506040513d60208110156116dd57600080fd5b5051905090565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561172f57600080fd5b505afa158015611743573d6000803e3d6000fd5b505050506040513d602081101561175957600080fd5b505161179d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19169055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561180957600080fd5b505afa15801561181d573d6000803e3d6000fd5b505050506040513d602081101561183357600080fd5b5051611877576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166118bc5760405162461bcd60e51b81526004018080602001828103825260288152602001806123636028913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d602081101561195357600080fd5b5051611997576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166119f2576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b60036020526000908152604090205460ff1681565b6001546001600160a01b031681565b600581565b60056020526000908152604090205460ff1681565b6004546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d6020811015611ae557600080fd5b5051611b29576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038216611b84576040805162461bcd60e51b815260206004820152601c60248201527f6e6577207661756c742073686f756c646e277420626520656d70747900000000604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090205460ff1615611be9576040805162461bcd60e51b81526020600482015260146024820152737661756c7420616c72656164792065786973747360601b604482015290519081900360640190fd5b6001600160a01b038116611c44576040805162461bcd60e51b815260206004820152601f60248201527f6e65772073747261746567792073686f756c646e277420626520656d70747900604482015290519081900360640190fd5b6001600160a01b03808316600081815260036020526040808220805460ff1916600117905580516319d0806560e11b815293851660048501525191926333a100ca926024808301939282900301818387803b158015611ca257600080fd5b505af1158015611cb6573d6000803e3d6000fd5b505050505050565b801561124b57611cd96001600160a01b038316333084611e5e565b600154611cf4906001600160a01b0384811691166000611ebe565b600154611d0e906001600160a01b03848116911683611ebe565b60015460408051632106bc9160e21b81526001600160a01b038581166004830152602482018590529151919092169163841af24491604480830192600092919082900301818387803b158015611ca257600080fd5b600082611d7257506000611dbf565b82820282848281611d7f57fe5b0414611dbc5760405162461bcd60e51b815260040180806020018281038252602181526020018061230c6021913960400191505060405180910390fd5b90505b92915050565b6000611dbc83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611fd1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e59908490612073565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611eb8908590612073565b50505050565b801580611f44575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611f1657600080fd5b505afa158015611f2a573d6000803e3d6000fd5b505050506040513d6020811015611f4057600080fd5b5051155b611f7f5760405162461bcd60e51b815260040180806020018281038252603681526020018061232d6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611e59908490612073565b6000818361205d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561202257818101518382015260200161200a565b50505050905090810190601f16801561204f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161206957fe5b0495945050505050565b60606120c8826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121249092919063ffffffff16565b805190915015611e59578080602001905160208110156120e757600080fd5b5051611e595760405162461bcd60e51b815260040180806020018281038252602a8152602001806122e2602a913960400191505060405180910390fd5b6060612133848460008561213b565b949350505050565b6060612146856122a8565b612197576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106121d65780518252601f1990920191602091820191016121b7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612238576040519150601f19603f3d011682016040523d82523d6000602084013e61223d565b606091505b509150915081156122515791506121339050565b8051156122615780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561202257818101518382015260200161200a565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061213357505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63656e65772072657761726420666f727761726465722073686f756c64206e6f7420626520656d707479a264697066735822122032ebb280d1e58a028b62069daa1bff50d5a79cee53e7e6069c5dc06b8b9b1fc064736f6c634300060c0033666565526577617264466f727761726465722073686f756c64206e6f7420626520656d707479",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806358d94fbc116100de578063a622ee7c11610097578063b8393eaf11610071578063b8393eaf1461049a578063d0fc3e83146104c0578063ed32fa33146104c8578063f706bf28146104f657610173565b8063a622ee7c14610464578063ae28d1281461048a578063b60f151a1461049257610173565b806358d94fbc146103905780635aa6e675146103c65780636e4af83e146103ea57806381860170146104105780639137c1a714610436578063975057e71461045c57610173565b80633259eeb6116101305780633259eeb61461027857806338dd98761461029e57806338f5a5e4146102c45780633c53eddd146102ea5780633e3309cc1461032c57806340c0423e1461035857610173565b8063026a0dd0146101785780630d453efb1461019257806313a86924146101cc5780632da624a314610206578063301153f11461022c57806330e412ad14610252575b600080fd5b610180610522565b60408051918252519081900360200190f35b6101b8600480360360208110156101a857600080fd5b50356001600160a01b0316610527565b604080519115158252519081900360200190f35b610204600480360360808110156101e257600080fd5b506001600160a01b038135169060208101359060408101359060600135610545565b005b6101806004803603602081101561021c57600080fd5b50356001600160a01b03166109f6565b6102046004803603602081101561024257600080fd5b50356001600160a01b0316610a63565b6101b86004803603602081101561026857600080fd5b50356001600160a01b0316610b95565b6102046004803603602081101561028e57600080fd5b50356001600160a01b0316610baa565b610204600480360360208110156102b457600080fd5b50356001600160a01b0316610cd9565b610204600480360360208110156102da57600080fd5b50356001600160a01b0316610db4565b610204600480360360a081101561030057600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060800135610e91565b6102046004803603604081101561034257600080fd5b506001600160a01b038135169060200135611176565b6102046004803603608081101561036e57600080fd5b506001600160a01b03813516906020810135906040810135906060013561124f565b610204600480360360608110156103a657600080fd5b506001600160a01b0381358116916020810135909116906040013561151f565b6103ce611664565b604080516001600160a01b039092168252519081900360200190f35b6102046004803603602081101561040057600080fd5b50356001600160a01b03166116e4565b6102046004803603602081101561042657600080fd5b50356001600160a01b03166117be565b6102046004803603602081101561044c57600080fd5b50356001600160a01b03166118de565b6103ce611a14565b6101b86004803603602081101561047a57600080fd5b50356001600160a01b0316611a23565b6103ce611a38565b610180611a47565b6101b8600480360360208110156104b057600080fd5b50356001600160a01b0316611a4c565b6103ce611a61565b610204600480360360408110156104de57600080fd5b506001600160a01b0381358116916020013516611a70565b6102046004803603604081101561050c57600080fd5b506001600160a01b038135169060200135611cbe565b606481565b6001600160a01b031660009081526003602052604090205460ff1690565b838383836000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b50519050670de0b6b3a764000084821115610635576105d7836105d18684611d63565b90611dc5565b6105e5866105d18585611d63565b1115610630576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b61069c565b610643836105d18684611d63565b610651836105d18885611d63565b111561069c576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b3360009081526005602052604090205460ff16806106d257506106bd611664565b6001600160a01b0316336001600160a01b0316145b610723576040805162461bcd60e51b815260206004820152601e60248201527f6f6e6c79206861726420776f726b65722063616e2063616c6c20746869730000604482015290519081900360640190fd5b6001600160a01b038a166000908152600360205260409020548a9060ff16610789576040805162461bcd60e51b81526020600482015260146024820152731d985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b604482015290519081900360640190fd5b60008b6001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c457600080fd5b505afa1580156107d8573d6000803e3d6000fd5b505050506040513d60208110156107ee57600080fd5b5051604080516313e9761560e21b815290519192506001600160a01b038e1691634fa5d8549160048082019260009290919082900301818387803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b50506004546001600160a01b03161591506108ce90505760048054604080516333b54be160e01b815233938101939093526001600160a01b038f8116602485015290519116916333b54be191604480830192600092919082900301818387803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050505b8b6001600160a01b031663a8c62e766040518163ffffffff1660e01b815260040160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d602081101561093157600080fd5b505160408051631df1ee3f60e21b815290516001600160a01b03928316928f16917f43ffccb0abea5304f42c5d67d56e479f21f76ecc142c39a770725e99125243bc91859184916377c7b8fc91600480820192602092909190829003018186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d60208110156109c857600080fd5b50516040805192835260208301919091524282820152519081900360600190a3505050505050505050505050565b6000816001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3157600080fd5b505afa158015610a45573d6000803e3d6000fd5b505050506040513d6020811015610a5b57600080fd5b505192915050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d6020811015610ad857600080fd5b5051610b1c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610b71576040805162461bcd60e51b815260206004820152601760248201527617dddbdc9ad95c881b5d5cdd081899481919599a5b9959604a1b604482015290519081900360640190fd5b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b60026020526000908152604090205460ff1681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610bf557600080fd5b505afa158015610c09573d6000803e3d6000fd5b505050506040513d6020811015610c1f57600080fd5b5051610c63576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610cb8576040805162461bcd60e51b815260206004820152601760248201527617dddbdc9ad95c881b5d5cdd081899481919599a5b9959604a1b604482015290519081900360640190fd5b6001600160a01b03166000908152600560205260409020805460ff19169055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610d2457600080fd5b505afa158015610d38573d6000803e3d6000fd5b505050506040513d6020811015610d4e57600080fd5b5051610d92576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d6020811015610e2957600080fd5b5051610e6d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b848383836000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed057600080fd5b505afa158015610ee4573d6000803e3d6000fd5b505050506040513d6020811015610efa57600080fd5b50519050670de0b6b3a764000084821115610f7b57610f1d836105d18684611d63565b610f2b866105d18585611d63565b1115610f76576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b610fe2565b610f89836105d18684611d63565b610f97836105d18885611d63565b1115610fe2576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561102d57600080fd5b505afa158015611041573d6000803e3d6000fd5b505050506040513d602081101561105757600080fd5b505161109b576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038b166000908152600360205260409020548b9060ff16611101576040805162461bcd60e51b81526020600482015260146024820152731d985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b604482015290519081900360640190fd5b8b6001600160a01b03166333a100ca8c6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b50505050505050505050505050505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d60208110156111eb57600080fd5b505161122f576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b61124b61123a611664565b6001600160a01b0384169083611e07565b5050565b838383836000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d60208110156112b857600080fd5b50519050670de0b6b3a764000084821115611339576112db836105d18684611d63565b6112e9866105d18585611d63565b1115611334576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b6113a0565b611347836105d18684611d63565b611355836105d18885611d63565b11156113a0576040805162461bcd60e51b815260206004820152601560248201527439b430b93290383934b1b2903232bb34b0ba34b7b760591b604482015290519081900360640190fd5b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d602081101561141557600080fd5b5051611459576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038a166000908152600360205260409020548a9060ff166114bf576040805162461bcd60e51b81526020600482015260146024820152731d985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b604482015290519081900360640190fd5b8a6001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050505050505050505050505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561156a57600080fd5b505afa15801561157e573d6000803e3d6000fd5b505050506040513d602081101561159457600080fd5b50516115d8576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b826001600160a01b0316631113ef526115ef611664565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b357600080fd5b505afa1580156116c7573d6000803e3d6000fd5b505050506040513d60208110156116dd57600080fd5b5051905090565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561172f57600080fd5b505afa158015611743573d6000803e3d6000fd5b505050506040513d602081101561175957600080fd5b505161179d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19169055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561180957600080fd5b505afa15801561181d573d6000803e3d6000fd5b505050506040513d602081101561183357600080fd5b5051611877576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166118bc5760405162461bcd60e51b81526004018080602001828103825260288152602001806123636028913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d602081101561195357600080fd5b5051611997576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166119f2576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b60036020526000908152604090205460ff1681565b6001546001600160a01b031681565b600581565b60056020526000908152604090205460ff1681565b6004546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d6020811015611ae557600080fd5b5051611b29576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038216611b84576040805162461bcd60e51b815260206004820152601c60248201527f6e6577207661756c742073686f756c646e277420626520656d70747900000000604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090205460ff1615611be9576040805162461bcd60e51b81526020600482015260146024820152737661756c7420616c72656164792065786973747360601b604482015290519081900360640190fd5b6001600160a01b038116611c44576040805162461bcd60e51b815260206004820152601f60248201527f6e65772073747261746567792073686f756c646e277420626520656d70747900604482015290519081900360640190fd5b6001600160a01b03808316600081815260036020526040808220805460ff1916600117905580516319d0806560e11b815293851660048501525191926333a100ca926024808301939282900301818387803b158015611ca257600080fd5b505af1158015611cb6573d6000803e3d6000fd5b505050505050565b801561124b57611cd96001600160a01b038316333084611e5e565b600154611cf4906001600160a01b0384811691166000611ebe565b600154611d0e906001600160a01b03848116911683611ebe565b60015460408051632106bc9160e21b81526001600160a01b038581166004830152602482018590529151919092169163841af24491604480830192600092919082900301818387803b158015611ca257600080fd5b600082611d7257506000611dbf565b82820282848281611d7f57fe5b0414611dbc5760405162461bcd60e51b815260040180806020018281038252602181526020018061230c6021913960400191505060405180910390fd5b90505b92915050565b6000611dbc83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611fd1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e59908490612073565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611eb8908590612073565b50505050565b801580611f44575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611f1657600080fd5b505afa158015611f2a573d6000803e3d6000fd5b505050506040513d6020811015611f4057600080fd5b5051155b611f7f5760405162461bcd60e51b815260040180806020018281038252603681526020018061232d6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611e59908490612073565b6000818361205d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561202257818101518382015260200161200a565b50505050905090810190601f16801561204f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161206957fe5b0495945050505050565b60606120c8826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121249092919063ffffffff16565b805190915015611e59578080602001905160208110156120e757600080fd5b5051611e595760405162461bcd60e51b815260040180806020018281038252602a8152602001806122e2602a913960400191505060405180910390fd5b6060612133848460008561213b565b949350505050565b6060612146856122a8565b612197576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106121d65780518252601f1990920191602091820191016121b7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612238576040519150601f19603f3d011682016040523d82523d6000602084013e61223d565b606091505b509150915081156122515791506121339050565b8051156122615780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561202257818101518382015260200161200a565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061213357505015159291505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63656e65772072657761726420666f727761726465722073686f756c64206e6f7420626520656d707479a264697066735822122032ebb280d1e58a028b62069daa1bff50d5a79cee53e7e6069c5dc06b8b9b1fc064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4805,
        "contract": "contracts/lib/@harvest-finance/Controller.sol:Controller",
        "label": "store",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Storage)5341"
      },
      {
        "astId": 3891,
        "contract": "contracts/lib/@harvest-finance/Controller.sol:Controller",
        "label": "feeRewardForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3896,
        "contract": "contracts/lib/@harvest-finance/Controller.sol:Controller",
        "label": "greyList",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3900,
        "contract": "contracts/lib/@harvest-finance/Controller.sol:Controller",
        "label": "vaults",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3902,
        "contract": "contracts/lib/@harvest-finance/Controller.sol:Controller",
        "label": "hardRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(HardRewards)5245"
      },
      {
        "astId": 4007,
        "contract": "contracts/lib/@harvest-finance/Controller.sol:Controller",
        "label": "hardWorkers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HardRewards)5245": {
        "encoding": "inplace",
        "label": "contract HardRewards",
        "numberOfBytes": "20"
      },
      "t_contract(Storage)5341": {
        "encoding": "inplace",
        "label": "contract Storage",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}