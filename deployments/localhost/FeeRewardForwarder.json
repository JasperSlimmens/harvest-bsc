{
  "address": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farm",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "TokenPoolSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeswapRouterV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pancakeswapRoutes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "poolNotifyFixedTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitSharingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pancakeswapRoute",
          "type": "address[]"
        }
      ],
      "name": "setConversionPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_store",
          "type": "address"
        }
      ],
      "name": "setStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setTokenPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "store",
      "outputs": [
        {
          "internalType": "contract Storage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf867f81b0e59e1ab23d301f77ce69aa80738e49846841cbff5600210074217e1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4ed7c70F96B99c776995fB64377f0d4aB3B0e1C1",
    "transactionIndex": 0,
    "gasUsed": "1156888",
    "logsBloom": "0x
    "blockHash": "0x7b450be7e10ebe904f5527d738d0f77d7def452e93bd4c7ff5b3c3c9d53890f3",
    "transactionHash": "0xf867f81b0e59e1ab23d301f77ce69aa80738e49846841cbff5600210074217e1",
    "logs": [],
    "blockNumber": 5294019,
    "cumulativeGasUsed": "1156888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
    "0x59b670e9fA9D0A427751Af201D676719a970857b"
  ],
  "solcInputHash": "1207e747733a6e2d2dab2e12a565ae77",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"TokenPoolSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pancakeswapRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"poolNotifyFixedTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pancakeswapRoute\",\"type\":\"address[]\"}],\"name\":\"setConversionPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setConversionPath(address,address,address[])\":{\"notice\":\"Sets the path for swapping tokens to the to address The to address is not validated to match the targetToken, so that we could first update the paths, and then, set the new target\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/@harvest-finance/FeeRewardForwarder.sol\":\"FeeRewardForwarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4b1686c1494213666dc1423cea64333c3063f334327216d69ca3d59f75a2517\",\"license\":\"MIT\"},\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xcca9eeefad9d3c8a68e426833a5c790d055beebc3f1cefbeac20b096456c9aef\",\"license\":\"GPL-3.0-or-later\"},\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport './IBEP20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeBEP20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf7a7cce5c7e15107bdb2c074331471d301e2766dac8942cf92f0298df7cd0b3\",\"license\":\"MIT\"},\"@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x806c8686fdf1afac78d0828ca7941e5ac30282a358d23cf502ec39893c64d4af\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/lib/@harvest-finance/FeeRewardForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./hardworkInterface/IRewardPool.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n\\r\\n// FeeRewardForwarder with no grain config\\r\\ncontract FeeRewardForwarder is Governable {\\r\\n  using SafeBEP20 for IBEP20;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  address public farm;\\r\\n\\r\\n  // address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\r\\n  // address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n  // address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\r\\n  \\r\\n  // address constant public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\r\\n  // address constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\\r\\n  // address constant public sushi = address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\r\\n  // address constant public dego = address(0x88EF27e69108B2633F8E1C184CC37940A075cC02);\\r\\n  // address constant public uni = address(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);\\r\\n  // address constant public comp = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\r\\n  // address constant public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n\\r\\n  // address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\\r\\n\\r\\n  // address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n\\r\\n  mapping (address => mapping (address => address[])) public pancakeswapRoutes;\\r\\n\\r\\n  // grain \\r\\n  // grain is a burnable ERC20 token that is deployed by Harvest\\r\\n  // we sell crops to buy back grain and burn it\\r\\n  // address public grain;\\r\\n  // uint256 public grainShareNumerator;\\r\\n  // uint256 public grainShareDenominator;\\r\\n\\r\\n  // In case we're not buying back grain immediately,\\r\\n  // we liquidate the crops into the grainBackerToken\\r\\n  // and send it to an EOA `grainBuybackReserve`\\r\\n  // bool public grainImmediateBuyback;\\r\\n  // address public grainBackerToken;\\r\\n  // address public grainBuybackReserve;\\r\\n  \\r\\n  // the targeted reward token to convert everything to\\r\\n  address public targetToken;\\r\\n  address public profitSharingPool;\\r\\n\\r\\n  // address constant public uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n  address constant public pancakeswapRouterV2 = address(0);\\r\\n\\r\\n  event TokenPoolSet(address token, address pool);\\r\\n\\r\\n  constructor(address _storage, address _farm) public Governable(_storage) {\\r\\n    // require(_grain != address(0), \\\"_grain not defined\\\");\\r\\n    require(_farm != address(0), \\\"_farm not defined\\\");\\r\\n    // grain = _grain;\\r\\n    farm = _farm;\\r\\n\\r\\n    // preset for the already in use crops\\r\\n    // pancakeswapRoutes[weth][farm] = [weth, usdc, farm];\\r\\n    // pancakeswapRoutes[dai][farm] = [dai, weth, usdc, farm];\\r\\n    // pancakeswapRoutes[usdc][farm] = [usdc, farm];\\r\\n    // pancakeswapRoutes[usdt][farm] = [usdt, weth, usdc, farm];\\r\\n\\r\\n    // pancakeswapRoutes[wbtc][farm] = [wbtc, weth, usdc, farm];\\r\\n    // pancakeswapRoutes[renBTC][farm] = [renBTC, weth, usdc, farm];\\r\\n    // pancakeswapRoutes[sushi][farm] = [sushi, weth, usdc, farm];\\r\\n    // pancakeswapRoutes[dego][farm] = [dego, weth, usdc, farm];\\r\\n    // pancakeswapRoutes[crv][farm] = [crv, weth, usdc, farm];\\r\\n    // pancakeswapRoutes[comp][farm] = [comp, weth, usdc, farm];\\r\\n    \\r\\n    // // Route to grain is always to farm then to grain.\\r\\n    // // So we will just use the existing route to buy FARM first\\r\\n    // // then sell partially to grain.\\r\\n    // pancakeswapRoutes[grain][farm] = [grain, farm];\\r\\n    // pancakeswapRoutes[farm][grain] = [farm, grain];\\r\\n\\r\\n    // // preset for grainBacker (usdc or weth)\\r\\n    // //weth\\r\\n    // pancakeswapRoutes[dai][weth] = [dai, weth];\\r\\n    // pancakeswapRoutes[usdc][weth] = [usdc, weth];\\r\\n    // pancakeswapRoutes[usdt][weth] = [usdt, weth];\\r\\n\\r\\n    // pancakeswapRoutes[wbtc][weth] = [wbtc, weth];\\r\\n    // pancakeswapRoutes[renBTC][weth] = [renBTC, weth];\\r\\n    // pancakeswapRoutes[sushi][weth] = [sushi, weth];\\r\\n    // pancakeswapRoutes[dego][weth] = [dego, weth];\\r\\n    // pancakeswapRoutes[crv][weth] = [crv, weth];\\r\\n    // pancakeswapRoutes[comp][weth] = [comp, weth];\\r\\n\\r\\n    // // usdc\\r\\n    // pancakeswapRoutes[weth][usdc] = [weth, usdc];\\r\\n    // pancakeswapRoutes[dai][usdc] = [dai, weth, usdc];\\r\\n    // pancakeswapRoutes[usdt][usdc] = [usdt, weth, usdc];\\r\\n\\r\\n    // pancakeswapRoutes[wbtc][usdc] = [wbtc, weth, usdc];\\r\\n    // pancakeswapRoutes[renBTC][usdc] = [renBTC, weth, usdc];\\r\\n    // pancakeswapRoutes[sushi][usdc] = [sushi, weth, usdc];\\r\\n    // pancakeswapRoutes[dego][usdc] = [dego, weth, usdc];\\r\\n    // pancakeswapRoutes[crv][usdc] = [crv, weth, usdc];\\r\\n    // pancakeswapRoutes[comp][usdc] = [comp, weth, usdc];\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  *   Set the pool that will receive the reward token\\r\\n  *   based on the address of the reward Token\\r\\n  */\\r\\n  function setTokenPool(address _pool) public onlyGovernance {\\r\\n    // To buy back grain, our `targetToken` needs to be FARM\\r\\n    require(farm == IRewardPool(_pool).rewardToken(), \\\"Rewardpool's token is not FARM\\\");\\r\\n    profitSharingPool = _pool;\\r\\n    targetToken = farm;\\r\\n    emit TokenPoolSet(targetToken, _pool);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Sets the path for swapping tokens to the to address\\r\\n  * The to address is not validated to match the targetToken,\\r\\n  * so that we could first update the paths, and then,\\r\\n  * set the new target\\r\\n  */\\r\\n  function setConversionPath(address from, address to, address[] memory _pancakeswapRoute)\\r\\n  public onlyGovernance {\\r\\n    require(from == _pancakeswapRoute[0],\\r\\n      \\\"The first token of the Pancakeswap route must be the from token\\\");\\r\\n    require(to == _pancakeswapRoute[_pancakeswapRoute.length - 1],\\r\\n      \\\"The last token of the Pancakeswap route must be the to token\\\");\\r\\n    pancakeswapRoutes[from][to] = _pancakeswapRoute;\\r\\n  }\\r\\n\\r\\n  // Transfers the funds from the msg.sender to the pool\\r\\n  // under normal circumstances, msg.sender is the strategy\\r\\n  function poolNotifyFixedTarget(address _token, uint256 _amount) external {\\r\\n    uint256 remainingAmount = _amount;\\r\\n    // Note: targetToken could only be FARM or NULL. \\r\\n    // it is only used to check that the rewardPool is set.\\r\\n    if (targetToken == address(0)) {\\r\\n      return; // a No-op if target pool is not set yet\\r\\n    }\\r\\n\\r\\n    if (_token == farm) {\\r\\n      // this is already the right token\\r\\n      // Note: Under current structure, this would be FARM.\\r\\n      // This would pass on the grain buy back as it would be the special case\\r\\n      // designed for NotifyHelper calls\\r\\n      // This is assuming that NO strategy would notify profits in FARM\\r\\n      IBEP20(_token).safeTransferFrom(msg.sender, profitSharingPool, _amount);\\r\\n      IRewardPool(profitSharingPool).notifyRewardAmount(_amount);\\r\\n    } else {\\r\\n      // // If grainImmediateBuyback is set to false, then funds to buy back grain needs to be sent to an address\\r\\n\\r\\n      // if (grainShareNumerator != 0 && !grainImmediateBuyback) {\\r\\n      //   require(grainBuybackReserve != address(0), \\\"grainBuybackReserve should not be empty\\\");\\r\\n      //   uint256 balanceToSend = _amount.mul(grainShareNumerator).div(grainShareDenominator);\\r\\n      //   remainingAmount = _amount.sub(balanceToSend);\\r\\n        \\r\\n      //   // If the liquidation path is set, liquidate to grainBackerToken and send it over\\r\\n      //   // if not, send the crops immediately\\r\\n      //   // this also covers the case when the _token is the grainBackerToken\\r\\n      //   if(pancakeswapRoutes[_token][grainBackerToken].length > 1){\\r\\n      //     IERC20(_token).safeTransferFrom(msg.sender, address(this), balanceToSend);\\r\\n      //     liquidate(_token, grainBackerToken, balanceToSend);\\r\\n      //     // send the grainBackerToken to the reserve\\r\\n      //     IERC20(grainBackerToken).safeTransfer(grainBuybackReserve, IERC20(grainBackerToken).balanceOf(address(this)));\\r\\n      //   } else {\\r\\n      //     IERC20(_token).safeTransferFrom(msg.sender, grainBuybackReserve, balanceToSend);\\r\\n      //   }\\r\\n      // }\\r\\n\\r\\n      // we need to convert _token to FARM\\r\\n      if (pancakeswapRoutes[_token][farm].length > 1) {\\r\\n        IBEP20(_token).safeTransferFrom(msg.sender, address(this), remainingAmount);\\r\\n        uint256 balanceToSwap = IBEP20(_token).balanceOf(address(this));\\r\\n        liquidate(_token, farm, balanceToSwap);\\r\\n\\r\\n        // if grain buyback is activated, then sell some FARM to buy and burn grain\\r\\n        // if(grainShareNumerator != 0 && grainImmediateBuyback) {\\r\\n        //   uint256 balanceToBuyback = (IERC20(farm).balanceOf(address(this))).mul(grainShareNumerator).div(grainShareDenominator);\\r\\n        //   liquidate(farm, grain, balanceToBuyback);\\r\\n\\r\\n        //   // burn all the grains in this contract\\r\\n        //   ERC20Burnable(grain).burn(IERC20(grain).balanceOf(address(this)));\\r\\n        // }\\r\\n\\r\\n        // now we can send this token forward\\r\\n        uint256 convertedRewardAmount = IBEP20(farm).balanceOf(address(this));\\r\\n        IBEP20(farm).safeTransfer(profitSharingPool, convertedRewardAmount);\\r\\n        IRewardPool(profitSharingPool).notifyRewardAmount(convertedRewardAmount);\\r\\n      } else { \\r\\n        // else the route does not exist for this token\\r\\n        // do not take any fees and revert. \\r\\n        // It's better to set the liquidation path then perform it again, \\r\\n        // rather then leaving the funds in controller\\r\\n        revert(\\\"FeeRewardForwarder: liquidation path doesn't exist\\\"); \\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function liquidate(address _from, address _to, uint256 balanceToSwap) internal {\\r\\n    if(balanceToSwap > 0){\\r\\n      IBEP20(_from).safeApprove(pancakeswapRouterV2, 0);\\r\\n      IBEP20(_from).safeApprove(pancakeswapRouterV2, balanceToSwap);\\r\\n\\r\\n      IUniswapV2Router02(pancakeswapRouterV2).swapExactTokensForTokens(\\r\\n        balanceToSwap,\\r\\n        1, // we will accept any amount\\r\\n        pancakeswapRoutes[_from][_to],\\r\\n        address(this),\\r\\n        block.timestamp\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // function setGrainBuybackRatio(uint256 _grainShareNumerator, uint256 _grainShareDenominator) public onlyGovernance {\\r\\n  //   require(_grainShareDenominator >= _grainShareNumerator, \\\"numerator cannot be greater than denominator\\\");\\r\\n  //   require(_grainShareDenominator != 0, \\\"_grainShareDenominator cannot be 0\\\");\\r\\n    \\r\\n  //   grainShareNumerator = _grainShareNumerator;\\r\\n  //   grainShareDenominator = _grainShareDenominator;\\r\\n  // }\\r\\n\\r\\n  // function setGrainConfig(\\r\\n  //   uint256 _grainShareNumerator, \\r\\n  //   uint256 _grainShareDenominator, \\r\\n  //   bool _grainImmediateBuyback, \\r\\n  //   address _grainBackerToken,\\r\\n  //   address _grainBuybackReserve\\r\\n  // ) external onlyGovernance {\\r\\n  //   require(_grainBuybackReserve != address(0), \\\"_grainBuybackReserve is empty\\\");\\r\\n  //   // grainBackerToken can be address(0), this way the forwarder will send the crops directly\\r\\n  //   // since it cannot find a path.\\r\\n  //   // grainShareNumerator can be 0, this means that no grain is being bought back\\r\\n  //   setGrainBuybackRatio(_grainShareNumerator, _grainShareDenominator);\\r\\n\\r\\n  //   grainImmediateBuyback = _grainImmediateBuyback;\\r\\n  //   grainBackerToken = _grainBackerToken;\\r\\n  //   grainBuybackReserve = _grainBuybackReserve;\\r\\n  // }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c416baee912fb97ded5ab560d04488992284127552771b1cdc33d264c0b4eb3\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport {Storage} from \\\"./Storage.sol\\\";\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  Storage public store;\\r\\n\\r\\n  constructor(address _store) public {\\r\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n    store = Storage(_store);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setStorage(address _store) public onlyGovernance {\\r\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n    store = Storage(_store);\\r\\n  }\\r\\n\\r\\n  function governance() public view returns (address) {\\r\\n    return store.governance();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x234fcc2a9615113afc1afaafc7dd084653ba041ec1c2b0b095c0682563b332c0\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ncontract Storage {\\r\\n\\r\\n  address public governance;\\r\\n  address public controller;\\r\\n\\r\\n  constructor() public {\\r\\n    governance = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n  function setController(address _controller) public onlyGovernance {\\r\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\r\\n    controller = _controller;\\r\\n  }\\r\\n\\r\\n  function isGovernance(address account) public view returns (bool) {\\r\\n    return account == governance;\\r\\n  }\\r\\n\\r\\n  function isController(address account) public view returns (bool) {\\r\\n    return account == controller;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8142e3eefdcf3b008def0450a0129bf81744736e27b9dac7e8f08abdd9585b21\",\"license\":\"MIT\"},\"contracts/lib/@harvest-finance/hardworkInterface/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n// Unifying the interface with the Synthetix Reward Pool \\r\\ninterface IRewardPool {\\r\\n  function rewardToken() external view returns (address);\\r\\n  function lpToken() external view returns (address);\\r\\n  function duration() external view returns (uint256);\\r\\n\\r\\n  function periodFinish() external view returns (uint256);\\r\\n  function rewardRate() external view returns (uint256);\\r\\n  function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n  function stake(uint256 amountWei) external;\\r\\n\\r\\n  // `balanceOf` would give the amount staked. \\r\\n  // As this is 1 to 1, this is also the holder's share\\r\\n  function balanceOf(address holder) external view returns (uint256);\\r\\n  // total shares & total lpTokens staked\\r\\n  function totalSupply() external view returns(uint256);\\r\\n\\r\\n  function withdraw(uint256 amountWei) external;\\r\\n  function exit() external;\\r\\n\\r\\n  // get claimed rewards\\r\\n  function earned(address holder) external view returns (uint256);\\r\\n\\r\\n  // claim rewards\\r\\n  function getReward() external;\\r\\n\\r\\n  // notify\\r\\n  function notifyRewardAmount(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd03f67c385996f06887e3944f0239db3be655169df55a33c23695f3055221a04\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161144a38038061144a8339818101604052604081101561003357600080fd5b508051602090910151816001600160a01b038116610098576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392831617905581166100fb576040805162461bcd60e51b815260206004820152601160248201527017d9985c9b481b9bdd081919599a5b9959607a1b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b03929092169190911790555061131f8061012b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637764b4d2116100715780637764b4d2146101a8578063808d6d9e146101ce578063841af244146102045780639137c1a714610230578063975057e714610256578063ec362d4a1461025e576100a9565b806301069692146100ae578063327107f7146100d257806336e9332d146100da57806340c8e2db146100e25780635aa6e675146101a0575b600080fd5b6100b6610266565b604080516001600160a01b039092168252519081900360200190f35b6100b661026b565b6100b661027a565b61019e600480360360608110156100f857600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561012c57600080fd5b82018360208201111561013e57600080fd5b8035906020019184602083028401116401000000008311171561016057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610289945050505050565b005b6100b6610448565b61019e600480360360208110156101be57600080fd5b50356001600160a01b03166104c8565b6100b6600480360360608110156101e457600080fd5b506001600160a01b038135811691602081013590911690604001356106bb565b61019e6004803603604081101561021a57600080fd5b506001600160a01b0381351690602001356106fd565b61019e6004803603602081101561024657600080fd5b50356001600160a01b03166109c9565b6100b6610aff565b6100b6610b0e565b600081565b6003546001600160a01b031681565b6001546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d60208110156102fe57600080fd5b5051610342576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8060008151811061034f57fe5b60200260200101516001600160a01b0316836001600160a01b0316146103a65760405162461bcd60e51b815260040180806020018281038252603f8152602001806111dd603f913960400191505060405180910390fd5b806001825103815181106103b657fe5b60200260200101516001600160a01b0316826001600160a01b03161461040d5760405162461bcd60e51b815260040180806020018281038252603c81526020018061121c603c913960400191505060405180910390fd5b6001600160a01b0380841660009081526002602090815260408083209386168352928152919020825161044292840190611158565b50505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561049757600080fd5b505afa1580156104ab573d6000803e3d6000fd5b505050506040513d60208110156104c157600080fd5b5051905090565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561051357600080fd5b505afa158015610527573d6000803e3d6000fd5b505050506040513d602081101561053d57600080fd5b5051610581576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d60208110156105e457600080fd5b50516001546001600160a01b03908116911614610648576040805162461bcd60e51b815260206004820152601e60248201527f526577617264706f6f6c277320746f6b656e206973206e6f74204641524d0000604482015290519081900360640190fd5b600480546001600160a01b03199081166001600160a01b038481169182179093556001546003805491851691909316179182905560408051929093168252602082015281517f250f0cc7fc2ed10e8df5e112b69b17c584e0a8b07f66ffe24a5d03e1731193ca929181900390910190a150565b600260205282600052604060002060205281600052604060002081815481106106e057fe5b6000918252602090912001546001600160a01b0316925083915050565b60035481906001600160a01b031661071557506109c5565b6001546001600160a01b03848116911614156107af57600454610747906001600160a01b038581169133911685610b1d565b6004805460408051633c6b16ab60e01b8152928301859052516001600160a01b0390911691633c6b16ab91602480830192600092919082900301818387803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b505050506109c3565b6001600160a01b038084166000908152600260209081526040808320600180549095168452909152902054111561098c576107f56001600160a01b038416333084610b1d565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561084457600080fd5b505afa158015610858573d6000803e3d6000fd5b505050506040513d602081101561086e57600080fd5b505160015490915061088b9085906001600160a01b031683610b77565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156108d657600080fd5b505afa1580156108ea573d6000803e3d6000fd5b505050506040513d602081101561090057600080fd5b5051600454600154919250610922916001600160a01b03908116911683610d4b565b6004805460408051633c6b16ab60e01b8152928301849052516001600160a01b0390911691633c6b16ab91602480830192600092919082900301818387803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050505050506109c3565b60405162461bcd60e51b81526004018080602001828103825260328152602001806112b86032913960400191505060405180910390fd5b505b5050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610a1457600080fd5b505afa158015610a28573d6000803e3d6000fd5b505050506040513d6020811015610a3e57600080fd5b5051610a82576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610add576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b6004546001600160a01b031681565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610442908590610d99565b80156109c357610b926001600160a01b038416600080610e4a565b610ba76001600160a01b038416600083610e4a565b6001600160a01b038381166000908152600260209081526040808320938616835292905281812091516338ed173960e01b8152600481018481526001602483018190523060648401819052426084850181905260a060448601908152875460a4870181905296976338ed1739978a979596919591929160c4019086908015610c5857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c3a575b50509650505050505050600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cb957600080fd5b8101908080516040519392919084640100000000821115610cd957600080fd5b908301906020820185811115610cee57600080fd5b8251866020820283011164010000000082111715610d0b57600080fd5b82525081516020918201928201910280838360005b83811015610d38578181015183820152602001610d20565b5050505090500160405250505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109c39084905b6060610dee826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f5d9092919063ffffffff16565b8051909150156109c357808060200190516020811015610e0d57600080fd5b50516109c35760405162461bcd60e51b815260040180806020018281038252602a815260200180611258602a913960400191505060405180910390fd5b801580610ed0575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d6020811015610ecc57600080fd5b5051155b610f0b5760405162461bcd60e51b81526004018080602001828103825260368152602001806112826036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526109c3908490610d99565b6060610f6c8484600085610f74565b949350505050565b6060610f7f8561111f565b610fd0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061100f5780518252601f199092019160209182019101610ff0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611071576040519150601f19603f3d011682016040523d82523d6000602084013e611076565b606091505b5091509150811561108a579150610f6c9050565b80511561109a5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110e45781810151838201526020016110cc565b50505050905090810190601f1680156111115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610f6c575050151592915050565b8280548282559060005260206000209081019282156111ad579160200282015b828111156111ad57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611178565b506111b99291506111bd565b5090565b5b808211156111b95780546001600160a01b03191681556001016111be56fe54686520666972737420746f6b656e206f66207468652050616e63616b657377617020726f757465206d757374206265207468652066726f6d20746f6b656e546865206c61737420746f6b656e206f66207468652050616e63616b657377617020726f757465206d7573742062652074686520746f20746f6b656e5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565645361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365466565526577617264466f727761726465723a206c69717569646174696f6e207061746820646f65736e2774206578697374a2646970667358221220f2bcabf5958cf498646a9a22509894c2b1f6718cc871d8c65d7230ac8f8202f664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80637764b4d2116100715780637764b4d2146101a8578063808d6d9e146101ce578063841af244146102045780639137c1a714610230578063975057e714610256578063ec362d4a1461025e576100a9565b806301069692146100ae578063327107f7146100d257806336e9332d146100da57806340c8e2db146100e25780635aa6e675146101a0575b600080fd5b6100b6610266565b604080516001600160a01b039092168252519081900360200190f35b6100b661026b565b6100b661027a565b61019e600480360360608110156100f857600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561012c57600080fd5b82018360208201111561013e57600080fd5b8035906020019184602083028401116401000000008311171561016057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610289945050505050565b005b6100b6610448565b61019e600480360360208110156101be57600080fd5b50356001600160a01b03166104c8565b6100b6600480360360608110156101e457600080fd5b506001600160a01b038135811691602081013590911690604001356106bb565b61019e6004803603604081101561021a57600080fd5b506001600160a01b0381351690602001356106fd565b61019e6004803603602081101561024657600080fd5b50356001600160a01b03166109c9565b6100b6610aff565b6100b6610b0e565b600081565b6003546001600160a01b031681565b6001546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d60208110156102fe57600080fd5b5051610342576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8060008151811061034f57fe5b60200260200101516001600160a01b0316836001600160a01b0316146103a65760405162461bcd60e51b815260040180806020018281038252603f8152602001806111dd603f913960400191505060405180910390fd5b806001825103815181106103b657fe5b60200260200101516001600160a01b0316826001600160a01b03161461040d5760405162461bcd60e51b815260040180806020018281038252603c81526020018061121c603c913960400191505060405180910390fd5b6001600160a01b0380841660009081526002602090815260408083209386168352928152919020825161044292840190611158565b50505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561049757600080fd5b505afa1580156104ab573d6000803e3d6000fd5b505050506040513d60208110156104c157600080fd5b5051905090565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561051357600080fd5b505afa158015610527573d6000803e3d6000fd5b505050506040513d602081101561053d57600080fd5b5051610581576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d60208110156105e457600080fd5b50516001546001600160a01b03908116911614610648576040805162461bcd60e51b815260206004820152601e60248201527f526577617264706f6f6c277320746f6b656e206973206e6f74204641524d0000604482015290519081900360640190fd5b600480546001600160a01b03199081166001600160a01b038481169182179093556001546003805491851691909316179182905560408051929093168252602082015281517f250f0cc7fc2ed10e8df5e112b69b17c584e0a8b07f66ffe24a5d03e1731193ca929181900390910190a150565b600260205282600052604060002060205281600052604060002081815481106106e057fe5b6000918252602090912001546001600160a01b0316925083915050565b60035481906001600160a01b031661071557506109c5565b6001546001600160a01b03848116911614156107af57600454610747906001600160a01b038581169133911685610b1d565b6004805460408051633c6b16ab60e01b8152928301859052516001600160a01b0390911691633c6b16ab91602480830192600092919082900301818387803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b505050506109c3565b6001600160a01b038084166000908152600260209081526040808320600180549095168452909152902054111561098c576107f56001600160a01b038416333084610b1d565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561084457600080fd5b505afa158015610858573d6000803e3d6000fd5b505050506040513d602081101561086e57600080fd5b505160015490915061088b9085906001600160a01b031683610b77565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156108d657600080fd5b505afa1580156108ea573d6000803e3d6000fd5b505050506040513d602081101561090057600080fd5b5051600454600154919250610922916001600160a01b03908116911683610d4b565b6004805460408051633c6b16ab60e01b8152928301849052516001600160a01b0390911691633c6b16ab91602480830192600092919082900301818387803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050505050506109c3565b60405162461bcd60e51b81526004018080602001828103825260328152602001806112b86032913960400191505060405180910390fd5b505b5050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610a1457600080fd5b505afa158015610a28573d6000803e3d6000fd5b505050506040513d6020811015610a3e57600080fd5b5051610a82576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610add576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b6004546001600160a01b031681565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610442908590610d99565b80156109c357610b926001600160a01b038416600080610e4a565b610ba76001600160a01b038416600083610e4a565b6001600160a01b038381166000908152600260209081526040808320938616835292905281812091516338ed173960e01b8152600481018481526001602483018190523060648401819052426084850181905260a060448601908152875460a4870181905296976338ed1739978a979596919591929160c4019086908015610c5857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c3a575b50509650505050505050600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cb957600080fd5b8101908080516040519392919084640100000000821115610cd957600080fd5b908301906020820185811115610cee57600080fd5b8251866020820283011164010000000082111715610d0b57600080fd5b82525081516020918201928201910280838360005b83811015610d38578181015183820152602001610d20565b5050505090500160405250505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109c39084905b6060610dee826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f5d9092919063ffffffff16565b8051909150156109c357808060200190516020811015610e0d57600080fd5b50516109c35760405162461bcd60e51b815260040180806020018281038252602a815260200180611258602a913960400191505060405180910390fd5b801580610ed0575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610ea257600080fd5b505afa158015610eb6573d6000803e3d6000fd5b505050506040513d6020811015610ecc57600080fd5b5051155b610f0b5760405162461bcd60e51b81526004018080602001828103825260368152602001806112826036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526109c3908490610d99565b6060610f6c8484600085610f74565b949350505050565b6060610f7f8561111f565b610fd0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061100f5780518252601f199092019160209182019101610ff0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611071576040519150601f19603f3d011682016040523d82523d6000602084013e611076565b606091505b5091509150811561108a579150610f6c9050565b80511561109a5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110e45781810151838201526020016110cc565b50505050905090810190601f1680156111115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610f6c575050151592915050565b8280548282559060005260206000209081019282156111ad579160200282015b828111156111ad57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611178565b506111b99291506111bd565b5090565b5b808211156111b95780546001600160a01b03191681556001016111be56fe54686520666972737420746f6b656e206f66207468652050616e63616b657377617020726f757465206d757374206265207468652066726f6d20746f6b656e546865206c61737420746f6b656e206f66207468652050616e63616b657377617020726f757465206d7573742062652074686520746f20746f6b656e5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565645361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365466565526577617264466f727761726465723a206c69717569646174696f6e207061746820646f65736e2774206578697374a2646970667358221220f2bcabf5958cf498646a9a22509894c2b1f6718cc871d8c65d7230ac8f8202f664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setConversionPath(address,address,address[])": {
        "notice": "Sets the path for swapping tokens to the to address The to address is not validated to match the targetToken, so that we could first update the paths, and then, set the new target"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4787,
        "contract": "contracts/lib/@harvest-finance/FeeRewardForwarder.sol:FeeRewardForwarder",
        "label": "store",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Storage)5323"
      },
      {
        "astId": 4490,
        "contract": "contracts/lib/@harvest-finance/FeeRewardForwarder.sol:FeeRewardForwarder",
        "label": "farm",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4497,
        "contract": "contracts/lib/@harvest-finance/FeeRewardForwarder.sol:FeeRewardForwarder",
        "label": "pancakeswapRoutes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 4499,
        "contract": "contracts/lib/@harvest-finance/FeeRewardForwarder.sol:FeeRewardForwarder",
        "label": "targetToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4501,
        "contract": "contracts/lib/@harvest-finance/FeeRewardForwarder.sol:FeeRewardForwarder",
        "label": "profitSharingPool",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(Storage)5323": {
        "encoding": "inplace",
        "label": "contract Storage",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    }
  }
}